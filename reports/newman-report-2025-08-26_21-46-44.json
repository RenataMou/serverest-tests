{
  "collection": {
    "_": {
      "postman_id": "12345678-1234-5678-9012-123456789012",
      "exporter_id": "12345678"
    },
    "item": [
      {
        "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
        "name": "1. Setup & Auth",
        "item": [
          {
            "id": "c656aaba-93b7-4836-8159-89839be87c48",
            "name": "Login - Sucesso",
            "request": {
              "url": {
                "path": [
                  "login"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                  "type": "text/javascript",
                  "exec": [
                    "// Limpa tokens anteriores",
                    "pm.environment.unset(\"authToken\");",
                    "",
                    "// Define credenciais de admin para login",
                    "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                    "pm.environment.set(\"loginPassword\", \"teste\");"
                  ],
                  "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('authorization');",
                    "});",
                    "",
                    "pm.test(\"Message de sucesso\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                    "});",
                    "",
                    "pm.test(\"Token é válido\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                    "    // Salva o token para usar em outras requisições",
                    "    pm.environment.set(\"authToken\", jsonData.authorization);",
                    "});",
                    "",
                    "pm.test(\"Response time é menor que 2000ms\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});"
                  ],
                  "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                }
              }
            ]
          },
          {
            "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
            "name": "Login - Credenciais Inválidas",
            "request": {
              "url": {
                "path": [
                  "login"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 401\", function () {",
                    "    pm.response.to.have.status(401);",
                    "});",
                    "",
                    "pm.test(\"Message de erro correto\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                    "});",
                    "",
                    "pm.test(\"Não retorna token\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.not.have.property('authorization');",
                    "});"
                  ],
                  "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
        "name": "2. Usuários",
        "item": [
          {
            "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
            "name": "Listar Usuários",
            "request": {
              "url": {
                "path": [
                  "usuarios"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response tem estrutura correta\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('quantidade');",
                    "    pm.expect(jsonData).to.have.property('usuarios');",
                    "    pm.expect(jsonData.usuarios).to.be.an('array');",
                    "});",
                    "",
                    "pm.test(\"Quantidade corresponde ao array\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                    "});",
                    "",
                    "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.usuarios.length > 0) {",
                    "        const usuario = jsonData.usuarios[0];",
                    "        pm.expect(usuario).to.have.property('nome');",
                    "        pm.expect(usuario).to.have.property('email');",
                    "        pm.expect(usuario).to.have.property('password');",
                    "        pm.expect(usuario).to.have.property('administrador');",
                    "        pm.expect(usuario).to.have.property('_id');",
                    "    }",
                    "});",
                    "",
                    "pm.test(\"Administrador é true ou false\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.usuarios.length > 0) {",
                    "        jsonData.usuarios.forEach(usuario => {",
                    "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                    "        });",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                }
              }
            ]
          },
          {
            "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
            "name": "Cadastrar Usuário - Sucesso",
            "request": {
              "url": {
                "path": [
                  "usuarios"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                  "type": "text/javascript",
                  "exec": [
                    "// Gera email único para evitar conflitos",
                    "const timestamp = Date.now();",
                    "const randomEmail = `user${timestamp}@teste.com`;",
                    "pm.environment.set(\"uniqueEmail\", randomEmail);",
                    "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                  ],
                  "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 201\", function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('_id');",
                    "});",
                    "",
                    "pm.test(\"Message de sucesso\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                    "});",
                    "",
                    "pm.test(\"ID do usuário é válido\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData._id).to.be.a('string');",
                    "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                    "    // Salva o ID para usar em outras requisições",
                    "    pm.environment.set(\"userId\", jsonData._id);",
                    "});",
                    "",
                    "pm.test(\"Content-Type é application/json\", function () {",
                    "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                    "});"
                  ],
                  "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                }
              }
            ]
          },
          {
            "id": "27dcb024-ad03-450b-986a-6903c0720521",
            "name": "Cadastrar Usuário - Email Duplicado",
            "request": {
              "url": {
                "path": [
                  "usuarios"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 400\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Message de erro correto\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                    "});",
                    "",
                    "pm.test(\"Não retorna ID\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.not.have.property('_id');",
                    "});"
                  ],
                  "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                }
              }
            ]
          },
          {
            "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
            "name": "Buscar Usuário por ID - Sucesso",
            "request": {
              "url": {
                "path": [
                  "usuarios",
                  "{{userId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('nome');",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "    pm.expect(jsonData).to.have.property('password');",
                    "    pm.expect(jsonData).to.have.property('administrador');",
                    "    pm.expect(jsonData).to.have.property('_id');",
                    "});",
                    "",
                    "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    const requestedId = pm.environment.get(\"userId\");",
                    "    pm.expect(jsonData._id).to.eql(requestedId);",
                    "});",
                    "",
                    "pm.test(\"Email é válido\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                    "    pm.expect(jsonData.email).to.match(emailRegex);",
                    "});"
                  ],
                  "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                }
              }
            ]
          },
          {
            "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
            "name": "Buscar Usuário por ID - Não Encontrado",
            "request": {
              "url": {
                "path": [
                  "usuarios",
                  "idInexistente123"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 400\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Message de erro correto\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                    "});"
                  ],
                  "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                }
              }
            ]
          },
          {
            "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
            "name": "Editar Usuário - Sucesso",
            "request": {
              "url": {
                "path": [
                  "usuarios",
                  "{{userId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Message de sucesso\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                    "});"
                  ],
                  "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
        "name": "3. Produtos",
        "item": [
          {
            "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
            "name": "Listar Produtos",
            "request": {
              "url": {
                "path": [
                  "produtos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response tem estrutura correta\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('quantidade');",
                    "    pm.expect(jsonData).to.have.property('produtos');",
                    "    pm.expect(jsonData.produtos).to.be.an('array');",
                    "});",
                    "",
                    "pm.test(\"Quantidade corresponde ao array\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                    "});",
                    "",
                    "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.produtos.length > 0) {",
                    "        const produto = jsonData.produtos[0];",
                    "        pm.expect(produto).to.have.property('nome');",
                    "        pm.expect(produto).to.have.property('preco');",
                    "        pm.expect(produto).to.have.property('descricao');",
                    "        pm.expect(produto).to.have.property('quantidade');",
                    "        pm.expect(produto).to.have.property('_id');",
                    "        // Salva um ID de produto para testes",
                    "        pm.environment.set(\"existingProductId\", produto._id);",
                    "    }",
                    "});",
                    "",
                    "pm.test(\"Preços são números positivos\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.produtos.length > 0) {",
                    "        jsonData.produtos.forEach(produto => {",
                    "            pm.expect(produto.preco).to.be.a('number');",
                    "            pm.expect(produto.preco).to.be.greaterThan(0);",
                    "        });",
                    "    }",
                    "});",
                    "",
                    "pm.test(\"Quantidades são números não negativos\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.produtos.length > 0) {",
                    "        jsonData.produtos.forEach(produto => {",
                    "            pm.expect(produto.quantidade).to.be.a('number');",
                    "            pm.expect(produto.quantidade).to.be.at.least(0);",
                    "        });",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                }
              }
            ]
          },
          {
            "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
            "name": "Cadastrar Produto - Sucesso",
            "request": {
              "url": {
                "path": [
                  "produtos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "{{authToken}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                  "type": "text/javascript",
                  "exec": [
                    "// Verifica se tem token de autorização",
                    "const token = pm.environment.get(\"authToken\");",
                    "if (!token) {",
                    "    pm.test(\"Token não encontrado\", function () {",
                    "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                    "    });",
                    "}",
                    "",
                    "// Gera nome único para o produto",
                    "const timestamp = Date.now();",
                    "const productName = `Produto Teste ${timestamp}`;",
                    "pm.environment.set(\"uniqueProductName\", productName);"
                  ],
                  "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 201\", function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('_id');",
                    "});",
                    "",
                    "pm.test(\"Message de sucesso\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                    "});",
                    "",
                    "pm.test(\"ID do produto é válido\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData._id).to.be.a('string');",
                    "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                    "    // Salva o ID para usar em outras requisições",
                    "    pm.environment.set(\"productId\", jsonData._id);",
                    "});"
                  ],
                  "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                }
              }
            ]
          },
          {
            "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
            "name": "Cadastrar Produto - Sem Token",
            "request": {
              "url": {
                "path": [
                  "produtos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 401\", function () {",
                    "    pm.response.to.have.status(401);",
                    "});",
                    "",
                    "pm.test(\"Message de erro de token\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                    "});"
                  ],
                  "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                }
              }
            ]
          },
          {
            "id": "c846f035-5523-48eb-adbe-8e616d058605",
            "name": "Cadastrar Produto - Nome Duplicado",
            "request": {
              "url": {
                "path": [
                  "produtos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "{{authToken}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 400\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Message de erro de nome duplicado\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                    "});"
                  ],
                  "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                }
              }
            ]
          },
          {
            "id": "4485a041-1636-4e34-9740-a4083967334f",
            "name": "Buscar Produto por ID - Sucesso",
            "request": {
              "url": {
                "path": [
                  "produtos",
                  "{{productId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('nome');",
                    "    pm.expect(jsonData).to.have.property('preco');",
                    "    pm.expect(jsonData).to.have.property('descricao');",
                    "    pm.expect(jsonData).to.have.property('quantidade');",
                    "    pm.expect(jsonData).to.have.property('_id');",
                    "});",
                    "",
                    "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    const requestedId = pm.environment.get(\"productId\");",
                    "    pm.expect(jsonData._id).to.eql(requestedId);",
                    "});"
                  ],
                  "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                }
              }
            ]
          },
          {
            "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
            "name": "Buscar Produto por ID - Não Encontrado",
            "request": {
              "url": {
                "path": [
                  "produtos",
                  "idProdutoInexistente123"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 400\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Message de erro correto\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                    "});"
                  ],
                  "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                }
              }
            ]
          },
          {
            "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
            "name": "Editar Produto - Sucesso",
            "request": {
              "url": {
                "path": [
                  "produtos",
                  "{{productId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "{{authToken}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Message de sucesso\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                    "});"
                  ],
                  "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
        "name": "4. Carrinhos",
        "item": [
          {
            "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
            "name": "Listar Carrinhos",
            "request": {
              "url": {
                "path": [
                  "carrinhos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response tem estrutura correta\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('quantidade');",
                    "    pm.expect(jsonData).to.have.property('carrinhos');",
                    "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                    "});",
                    "",
                    "pm.test(\"Quantidade corresponde ao array\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                    "});",
                    "",
                    "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.carrinhos.length > 0) {",
                    "        const carrinho = jsonData.carrinhos[0];",
                    "        pm.expect(carrinho).to.have.property('produtos');",
                    "        pm.expect(carrinho).to.have.property('precoTotal');",
                    "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                    "        pm.expect(carrinho).to.have.property('idUsuario');",
                    "        pm.expect(carrinho).to.have.property('_id');",
                    "        pm.expect(carrinho.produtos).to.be.an('array');",
                    "    }",
                    "});",
                    "",
                    "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                    "        const produto = jsonData.carrinhos[0].produtos[0];",
                    "        pm.expect(produto).to.have.property('idProduto');",
                    "        pm.expect(produto).to.have.property('quantidade');",
                    "        pm.expect(produto).to.have.property('precoUnitario');",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                }
              }
            ]
          },
          {
            "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
            "name": "Cadastrar Carrinho - Sucesso",
            "request": {
              "url": {
                "path": [
                  "carrinhos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "{{authToken}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                  "type": "text/javascript",
                  "exec": [
                    "// Verifica se tem token e produto para adicionar ao carrinho",
                    "const token = pm.environment.get(\"authToken\");",
                    "let productId = pm.environment.get(\"productId\");",
                    "",
                    "if (!token) {",
                    "    pm.test(\"Token não encontrado\", function () {",
                    "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                    "    });",
                    "}",
                    "",
                    "// Se não tiver productId, usa um existente",
                    "if (!productId) {",
                    "    productId = pm.environment.get(\"existingProductId\");",
                    "    pm.environment.set(\"productId\", productId);",
                    "}",
                    "",
                    "if (!productId) {",
                    "    pm.test(\"Product ID não encontrado\", function () {",
                    "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "077908fd-1103-4913-9c2b-233be758ac11",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 201\", function () {",
                    "    pm.response.to.have.status(201);",
                    "});",
                    "",
                    "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('message');",
                    "    pm.expect(jsonData).to.have.property('_id');",
                    "});",
                    "",
                    "pm.test(\"Message de sucesso\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                    "});",
                    "",
                    "pm.test(\"ID do carrinho é válido\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData._id).to.be.a('string');",
                    "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                    "    // Salva o ID para usar em outras requisições",
                    "    pm.environment.set(\"cartId\", jsonData._id);",
                    "});"
                  ],
                  "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                }
              }
            ]
          },
          {
            "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
            "name": "Cadastrar Carrinho - Sem Token",
            "request": {
              "url": {
                "path": [
                  "carrinhos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 401\", function () {",
                    "    pm.response.to.have.status(401);",
                    "});",
                    "",
                    "pm.test(\"Message de erro de token\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                    "});"
                  ],
                  "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                }
              }
            ]
          },
          {
            "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
            "name": "Cadastrar Carrinho - Produto Inexistente",
            "request": {
              "url": {
                "path": [
                  "carrinhos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "{{authToken}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 400\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Message de erro de produto não encontrado\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                    "});"
                  ],
                  "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                }
              }
            ]
          },
          {
            "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
            "name": "Buscar Carrinho por ID - Sucesso",
            "request": {
              "url": {
                "path": [
                  "carrinhos",
                  "{{cartId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('produtos');",
                    "    pm.expect(jsonData).to.have.property('precoTotal');",
                    "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                    "    pm.expect(jsonData).to.have.property('idUsuario');",
                    "    pm.expect(jsonData).to.have.property('_id');",
                    "});",
                    "",
                    "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    const requestedId = pm.environment.get(\"cartId\");",
                    "    pm.expect(jsonData._id).to.eql(requestedId);",
                    "});"
                  ],
                  "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                }
              }
            ]
          },
          {
            "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
            "name": "Buscar Carrinho por ID - Não Encontrado",
            "request": {
              "url": {
                "path": [
                  "carrinhos",
                  "carrinhoInexistente123"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 400\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Message de erro correto\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                    "});"
                  ],
                  "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                }
              }
            ]
          },
          {
            "id": "39995f61-108c-470e-8b69-926b97624fb0",
            "name": "Concluir Compra - Sucesso",
            "request": {
              "url": {
                "path": [
                  "carrinhos",
                  "concluir-compra"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "{{authToken}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                  "type": "text/javascript",
                  "exec": [
                    "// Verifica se tem token",
                    "const token = pm.environment.get(\"authToken\");",
                    "if (!token) {",
                    "    pm.test(\"Token não encontrado\", function () {",
                    "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Message de sucesso ou aviso\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    const validMessages = [",
                    "        \"Registro excluído com sucesso\",",
                    "        \"Não foi encontrado carrinho para esse usuário\"",
                    "    ];",
                    "    pm.expect(validMessages).to.include(jsonData.message);",
                    "});",
                    "",
                    "// Limpa o cartId se a compra foi concluída com sucesso",
                    "const jsonData = pm.response.json();",
                    "if (jsonData.message === \"Registro excluído com sucesso\") {",
                    "    pm.environment.unset(\"cartId\");",
                    "}"
                  ],
                  "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                }
              }
            ]
          },
          {
            "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
            "name": "Cancelar Compra - Token Inválido",
            "request": {
              "url": {
                "path": [
                  "carrinhos",
                  "cancelar-compra"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 401\", function () {",
                    "    pm.response.to.have.status(401);",
                    "});",
                    "",
                    "pm.test(\"Message de erro de token\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                    "});"
                  ],
                  "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1998b44d-5077-455d-b700-0dd19c46d34f",
        "name": "5. Cenários de Limpeza",
        "item": [
          {
            "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
            "name": "Excluir Produto - Sucesso",
            "request": {
              "url": {
                "path": [
                  "produtos",
                  "{{productId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "{{authToken}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Message de sucesso ou aviso\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    const validMessages = [",
                    "        \"Registro excluído com sucesso\",",
                    "        \"Nenhum registro excluído\"",
                    "    ];",
                    "    pm.expect(validMessages).to.include(jsonData.message);",
                    "});"
                  ],
                  "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
                }
              }
            ]
          },
          {
            "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
            "name": "Excluir Usuário - Sucesso",
            "request": {
              "url": {
                "path": [
                  "usuarios",
                  "{{userId}}"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "",
                    "pm.test(\"Message de sucesso ou aviso\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    const validMessages = [",
                    "        \"Registro excluído com sucesso\",",
                    "        \"Nenhum registro excluído\"",
                    "    ];",
                    "    pm.expect(validMessages).to.include(jsonData.message);",
                    "});"
                  ],
                  "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
        "name": "6. Testes de Limite e Edge Cases",
        "item": [
          {
            "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
            "name": "Cadastrar Usuário - Campos Vazios",
            "request": {
              "url": {
                "path": [
                  "usuarios"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 400\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Response contém erros de validação\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('nome');",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "    pm.expect(jsonData).to.have.property('password');",
                    "    pm.expect(jsonData).to.have.property('administrador');",
                    "});"
                  ],
                  "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                }
              }
            ]
          },
          {
            "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
            "name": "Cadastrar Produto - Preço Negativo",
            "request": {
              "url": {
                "path": [
                  "produtos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "{{authToken}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 400\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Response contém erro de validação de preço\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('preco');",
                    "});"
                  ],
                  "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                }
              }
            ]
          },
          {
            "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
            "name": "Cadastrar Carrinho - Quantidade Excessiva",
            "request": {
              "url": {
                "path": [
                  "carrinhos"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "{{authToken}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "74f41699-8194-4067-b4cf-21b282160563",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code é 400\", function () {",
                    "    pm.response.to.have.status(400);",
                    "});",
                    "",
                    "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                    "    const jsonData = pm.response.json();",
                    "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                    "});"
                  ],
                  "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "bbca898b-3fb7-4f04-9b3e-1e11d27ba14d",
          "type": "text/javascript",
          "exec": [
            "// Script global executado antes de cada requisição",
            "// Função para limpar dados antigos antes dos testes",
            "function initializeEnvironmentIfNeeded() {",
            "    if (!pm.environment.get(\"baseUrl\")) {",
            "        pm.environment.set(\"baseUrl\", \"http://localhost:3000\");",
            "    }",
            "}",
            "",
            "initializeEnvironmentIfNeeded();"
          ],
          "_lastExecutionId": "f6b2268c-5183-43a7-85aa-e954aa73baac"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "type": "text/javascript",
          "exec": [
            "// Scripts globais executados após cada requisição",
            "",
            "// Validações globais aplicadas a todas as requisições",
            "pm.test(\"Response é JSON válido\", function () {",
            "    pm.response.to.be.json;",
            "});",
            "",
            "pm.test(\"Response time é aceitável\", function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(5000);",
            "});",
            "",
            "pm.test(\"Content-Type correto\", function () {",
            "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
            "});",
            "",
            "pm.test(\"Não há vazamento de dados sensíveis\", function () {",
            "    const responseText = pm.response.text();",
            "    pm.expect(responseText).to.not.contain(\"password_hash\");",
            "    pm.expect(responseText).to.not.contain(\"secret_key\");",
            "    pm.expect(responseText).to.not.contain(\"jwt_secret\");",
            "});"
          ],
          "_lastExecutionId": "6c611e55-f031-4f63-a83b-4b8e956d951a"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:3000",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "12345678-1234-5678-9012-123456789012",
      "name": "ServeRest - API Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Collection completa para testar a API ServeRest com cenários positivos e negativos",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-08-26T20:00:00.000Z",
      "postman_exported_using": "Postman/10.0.0"
    },
    "id": "12345678-1234-5678-9012-environment123",
    "name": "ServeRest - Environment",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:3000",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "fulano@qa.com",
        "key": "loginEmail"
      },
      {
        "type": "any",
        "value": "teste",
        "key": "loginPassword"
      },
      {
        "type": "any",
        "value": "",
        "key": "userId"
      },
      {
        "type": "any",
        "value": "",
        "key": "productId"
      },
      {
        "type": "any",
        "value": "",
        "key": "existingProductId"
      },
      {
        "type": "any",
        "value": "",
        "key": "cartId"
      },
      {
        "type": "any",
        "value": "user1756255605422@teste.com",
        "key": "uniqueEmail"
      },
      {
        "type": "any",
        "value": "Usuario Teste 1756255605422",
        "key": "uniqueName"
      },
      {
        "type": "any",
        "value": "Produto Teste 1756255605563",
        "key": "uniqueProductName"
      }
    ]
  },
  "globals": {
    "id": "7a4595b7-3830-49ce-8821-230c531ab652",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 28,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 89,
        "pending": 0,
        "failed": 1
      },
      "prerequests": {
        "total": 28,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 28,
        "pending": 0,
        "failed": 28
      },
      "tests": {
        "total": 28,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 198,
        "pending": 0,
        "failed": 198
      },
      "testScripts": {
        "total": 56,
        "pending": 0,
        "failed": 1
      },
      "prerequestScripts": {
        "total": 33,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1756255605276,
      "completed": 1756255605978
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "334ad2a3-a039-4a56-9861-852e298462fe",
          "httpRequestId": "37eb1079-e5f5-48bb-9288-edb4bffbe8de"
        },
        "item": {
          "id": "c656aaba-93b7-4836-8159-89839be87c48",
          "name": "Login - Sucesso",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                "type": "text/javascript",
                "exec": [
                  "// Limpa tokens anteriores",
                  "pm.environment.unset(\"authToken\");",
                  "",
                  "// Define credenciais de admin para login",
                  "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                  "pm.environment.set(\"loginPassword\", \"teste\");"
                ],
                "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('authorization');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"Token é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                  "    // Salva o token para usar em outras requisições",
                  "    pm.environment.set(\"authToken\", jsonData.authorization);",
                  "});",
                  "",
                  "pm.test(\"Response time é menor que 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "95088ca0-d484-48ec-829d-d65de0324c39",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}"
          }
        },
        "id": "c656aaba-93b7-4836-8159-89839be87c48",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:1)"
            }
          },
          {
            "assertion": "Status code é 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Response tem propriedades obrigatórias",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response tem propriedades obrigatórias",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)"
            }
          },
          {
            "assertion": "Message de sucesso",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Message de sucesso",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:1)"
            }
          },
          {
            "assertion": "Token é válido",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Token é válido",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:1)"
            }
          },
          {
            "assertion": "Response time é menor que 2000ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Response time é menor que 2000ms",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:5:1)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6f62176d-52e0-4a4c-83c4-d5d07452f069",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4646cf1a-e9a6-4165-9325-7635f76d32ce"
        },
        "item": {
          "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
          "name": "Login - Credenciais Inválidas",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('authorization');",
                  "});"
                ],
                "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a3725761-ec6c-488d-8f38-617dee9fc7bc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
          }
        },
        "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:2)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:2)"
            }
          },
          {
            "assertion": "Status code é 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 401",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Message de erro correto",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de erro correto",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Não retorna token",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Não retorna token",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "44c150c7-a6a5-4612-8195-063f679446a2",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3ebe1e5d-5ecf-4d60-83e5-69a1e2c901a4"
        },
        "item": {
          "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
          "name": "Listar Usuários",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('usuarios');",
                  "    pm.expect(jsonData.usuarios).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                  "});",
                  "",
                  "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        const usuario = jsonData.usuarios[0];",
                  "        pm.expect(usuario).to.have.property('nome');",
                  "        pm.expect(usuario).to.have.property('email');",
                  "        pm.expect(usuario).to.have.property('password');",
                  "        pm.expect(usuario).to.have.property('administrador');",
                  "        pm.expect(usuario).to.have.property('_id');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Administrador é true ou false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        jsonData.usuarios.forEach(usuario => {",
                  "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "usuarios"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c44e0f65-a73b-4c7f-8090-159c9c3e18f7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:3)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:3)"
            }
          },
          {
            "assertion": "Status code é 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response tem estrutura correta",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response tem estrutura correta",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)"
            }
          },
          {
            "assertion": "Quantidade corresponde ao array",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Quantidade corresponde ao array",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:3)"
            }
          },
          {
            "assertion": "Usuários têm propriedades obrigatórias",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Usuários têm propriedades obrigatórias",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:3)"
            }
          },
          {
            "assertion": "Administrador é true ou false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "Administrador é true ou false",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "06604da0-ece3-4a2f-a435-2a1db8389620",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "747d1d1d-1362-4a03-a552-f905d8cbb85c"
        },
        "item": {
          "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
          "name": "Cadastrar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                "type": "text/javascript",
                "exec": [
                  "// Gera email único para evitar conflitos",
                  "const timestamp = Date.now();",
                  "const randomEmail = `user${timestamp}@teste.com`;",
                  "pm.environment.set(\"uniqueEmail\", randomEmail);",
                  "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                ],
                "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do usuário é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"userId\", jsonData._id);",
                  "});",
                  "",
                  "pm.test(\"Content-Type é application/json\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                  "});"
                ],
                "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "usuarios"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9257f19a-2b3d-4351-b841-124d01bc12e0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"nome\": \"Usuario Teste 1756255605422\",\n  \"email\": \"user1756255605422@teste.com\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
          }
        },
        "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:4)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:4)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:4)"
            }
          },
          {
            "assertion": "Status code é 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 201",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Response tem propriedades obrigatórias",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response tem propriedades obrigatórias",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)"
            }
          },
          {
            "assertion": "Message de sucesso",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Message de sucesso",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:4)"
            }
          },
          {
            "assertion": "ID do usuário é válido",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "ID do usuário é válido",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:4)"
            }
          },
          {
            "assertion": "Content-Type é application/json",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Content-Type é application/json",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:5:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6add7c52-7825-40ab-9987-1afe9e5f109c",
          "length": 28,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e90e2372-0c45-4ff7-9613-8ed432fd3b50"
        },
        "item": {
          "id": "27dcb024-ad03-450b-986a-6903c0720521",
          "name": "Cadastrar Usuário - Email Duplicado",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('_id');",
                  "});"
                ],
                "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "usuarios"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6b2c78ea-439d-4818-93a9-f5d987924433",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"nome\": \"Usuario Teste 1756255605422\",\n  \"email\": \"user1756255605422@teste.com\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
          }
        },
        "id": "27dcb024-ad03-450b-986a-6903c0720521",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:5)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:5)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:5)"
            }
          },
          {
            "assertion": "Status code é 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Message de erro correto",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de erro correto",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)"
            }
          },
          {
            "assertion": "Não retorna ID",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Não retorna ID",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "73c66d12-f0cc-49a7-8e4c-31612cc87bfb",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "652b9bcb-72e7-4990-8985-58674c8ab8f4"
        },
        "item": {
          "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
          "name": "Buscar Usuário por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"userId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});",
                  "",
                  "pm.test(\"Email é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                  "    pm.expect(jsonData.email).to.match(emailRegex);",
                  "});"
                ],
                "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "usuarios",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fb80ffc2-31fb-475a-8f87-69002504f218",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:6)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:6)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:6)"
            }
          },
          {
            "assertion": "Status code é 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response tem propriedades obrigatórias",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response tem propriedades obrigatórias",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)"
            }
          },
          {
            "assertion": "ID do usuário corresponde ao solicitado",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "ID do usuário corresponde ao solicitado",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:6)"
            }
          },
          {
            "assertion": "Email é válido",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Email é válido",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6f929fb8-8c23-4d00-8b19-cde2a6e93c2b",
          "length": 28,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54c82174-6b42-4232-8ff3-4494f53fce05"
        },
        "item": {
          "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
          "name": "Buscar Usuário por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "idInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "usuarios",
              "idInexistente123"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "04f18abd-113f-42a2-923c-0a93c4c31e0c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:7)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:7)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:7)"
            }
          },
          {
            "assertion": "Status code é 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          },
          {
            "assertion": "Message de erro correto",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de erro correto",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "76e62b71-d081-44c2-b889-9d4274ee2279",
          "length": 28,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "158f879a-928e-4048-8ead-a849b54e7345"
        },
        "item": {
          "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
          "name": "Editar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "usuarios",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d34cf9bf-202c-4ad6-adc7-67aebdfbddce",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"nome\": \"Usuario Teste 1756255605422 - Editado\",\n  \"email\": \"user1756255605422@teste.com\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
          }
        },
        "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:8)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:8)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:8)"
            }
          },
          {
            "assertion": "Status code é 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Message de sucesso",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de sucesso",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ac7f290b-c6f8-458b-929f-c3383466adb5",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b286b68d-8355-41db-9b29-808eef35b6db"
        },
        "item": {
          "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
          "name": "Listar Produtos",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData.produtos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                  "});",
                  "",
                  "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        const produto = jsonData.produtos[0];",
                  "        pm.expect(produto).to.have.property('nome');",
                  "        pm.expect(produto).to.have.property('preco');",
                  "        pm.expect(produto).to.have.property('descricao');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('_id');",
                  "        // Salva um ID de produto para testes",
                  "        pm.environment.set(\"existingProductId\", produto._id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Preços são números positivos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.preco).to.be.a('number');",
                  "            pm.expect(produto.preco).to.be.greaterThan(0);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Quantidades são números não negativos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.quantidade).to.be.a('number');",
                  "            pm.expect(produto.quantidade).to.be.at.least(0);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "produtos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6dd45129-cd33-4bde-bc39-da2184e7496f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:9)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:9)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:9)"
            }
          },
          {
            "assertion": "Status code é 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Response tem estrutura correta",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response tem estrutura correta",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)"
            }
          },
          {
            "assertion": "Quantidade corresponde ao array",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Quantidade corresponde ao array",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:9)"
            }
          },
          {
            "assertion": "Produtos têm propriedades obrigatórias",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Produtos têm propriedades obrigatórias",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:9)"
            }
          },
          {
            "assertion": "Preços são números positivos",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "Preços são números positivos",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:9)"
            }
          },
          {
            "assertion": "Quantidades são números não negativos",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "Quantidades são números não negativos",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:6:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fd2994f6-9599-4bf4-bd21-167610a1ef24",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5803fed2-f183-4b3f-9db2-d73a196530b5"
        },
        "item": {
          "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
          "name": "Cadastrar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token de autorização",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Gera nome único para o produto",
                  "const timestamp = Date.now();",
                  "const productName = `Produto Teste ${timestamp}`;",
                  "pm.environment.set(\"uniqueProductName\", productName);"
                ],
                "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do produto é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"productId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
              }
            }
          ]
        },
        "assertions": [
          {
            "assertion": "Token não encontrado",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Token não encontrado",
              "message": "Execute o login primeiro para obter o token",
              "stack": "AssertionError: Execute o login primeiro para obter o token\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:10)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:10)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:10)"
            }
          },
          {
            "assertion": "Status code é 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 201",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response tem propriedades obrigatórias",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response tem propriedades obrigatórias",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)"
            }
          },
          {
            "assertion": "Message de sucesso",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Message de sucesso",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:10)"
            }
          },
          {
            "assertion": "ID do produto é válido",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "ID do produto é válido",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:10)"
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "produtos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{authToken}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8204b183-fce0-484c-b204-adb046d2f205",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"nome\": \"Produto Teste 1756255605563\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
          }
        },
        "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        }
      },
      {
        "cursor": {
          "ref": "9667a467-2615-41b0-bce3-c1e2b70f04f2",
          "length": 28,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "feb3f871-4ef3-42de-a391-5e1810091978"
        },
        "item": {
          "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
          "name": "Cadastrar Produto - Sem Token",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "produtos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "24885e9b-fab8-4aa2-8a66-8a2bf85dfd15",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
          }
        },
        "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:11)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:11)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:11)"
            }
          },
          {
            "assertion": "Status code é 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 401",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Message de erro de token",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de erro de token",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "77ba241d-242f-410c-bfcc-913bd58be9c6",
          "length": 28,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1361984b-cc03-43f7-9a8b-319b0347b223"
        },
        "item": {
          "id": "c846f035-5523-48eb-adbe-8e616d058605",
          "name": "Cadastrar Produto - Nome Duplicado",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de nome duplicado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                  "});"
                ],
                "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "produtos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{authToken}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "988ddf88-7806-4629-a842-77ac3aa90960",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"nome\": \"Produto Teste 1756255605563\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
          }
        },
        "id": "c846f035-5523-48eb-adbe-8e616d058605",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:12)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:12)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:12)"
            }
          },
          {
            "assertion": "Status code é 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "Message de erro de nome duplicado",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de erro de nome duplicado",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c2581b78-0d6e-439c-bb5d-f9e3958a8913",
          "length": 28,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2ecadca2-2a6a-4496-aa6e-324cc7983127"
        },
        "item": {
          "id": "4485a041-1636-4e34-9740-a4083967334f",
          "name": "Buscar Produto por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "    pm.expect(jsonData).to.have.property('descricao');",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"productId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "produtos",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3da63e3b-3fd4-4328-b44e-7d2fe22722b0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "4485a041-1636-4e34-9740-a4083967334f",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:13)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:13)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:13)"
            }
          },
          {
            "assertion": "Status code é 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "Response tem propriedades obrigatórias",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response tem propriedades obrigatórias",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)"
            }
          },
          {
            "assertion": "ID do produto corresponde ao solicitado",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "ID do produto corresponde ao solicitado",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d0676918-934b-4dd8-8664-3265e69d1bd4",
          "length": 28,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fdbc83b7-3d23-47de-a582-acf903ecf530"
        },
        "item": {
          "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
          "name": "Buscar Produto por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "produtos",
                "idProdutoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "produtos",
              "idProdutoInexistente123"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "24793bdc-07b3-4aaa-89f9-afd5208d3978",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:14)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:14)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:14)"
            }
          },
          {
            "assertion": "Status code é 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "Message de erro correto",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de erro correto",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "080f9aa5-9587-4643-b3c6-6467a886824c",
          "length": 28,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "58fbc5d6-aacf-45c0-8075-f93ad66db673"
        },
        "item": {
          "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
          "name": "Editar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "produtos",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{authToken}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bb0f1a63-462c-4b0c-b3fa-2e43e9a36cd1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"nome\": \"Produto Teste 1756255605563 - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
          }
        },
        "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:15)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:15)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:15)"
            }
          },
          {
            "assertion": "Status code é 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "Message de sucesso",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de sucesso",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f442f897-b0bd-4b6b-a34d-6a95d7ce00ac",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fae9f86-5468-4113-b7ea-c0b70f8552e9"
        },
        "item": {
          "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
          "name": "Listar Carrinhos",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('carrinhos');",
                  "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                  "});",
                  "",
                  "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0) {",
                  "        const carrinho = jsonData.carrinhos[0];",
                  "        pm.expect(carrinho).to.have.property('produtos');",
                  "        pm.expect(carrinho).to.have.property('precoTotal');",
                  "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                  "        pm.expect(carrinho).to.have.property('idUsuario');",
                  "        pm.expect(carrinho).to.have.property('_id');",
                  "        pm.expect(carrinho.produtos).to.be.an('array');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                  "        const produto = jsonData.carrinhos[0].produtos[0];",
                  "        pm.expect(produto).to.have.property('idProduto');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('precoUnitario');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "carrinhos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "940757bf-b101-45de-a22f-d098aff00241",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:16)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:16)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:16)"
            }
          },
          {
            "assertion": "Status code é 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "Response tem estrutura correta",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response tem estrutura correta",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)"
            }
          },
          {
            "assertion": "Quantidade corresponde ao array",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Quantidade corresponde ao array",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:16)"
            }
          },
          {
            "assertion": "Carrinhos têm propriedades obrigatórias",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "Carrinhos têm propriedades obrigatórias",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:16)"
            }
          },
          {
            "assertion": "Produtos do carrinho têm propriedades corretas",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "Produtos do carrinho têm propriedades corretas",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9d35a04d-7593-4aee-a041-1abd958a6292",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "84d907b5-0f1c-4fd7-a223-46410cd1461e"
        },
        "item": {
          "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
          "name": "Cadastrar Carrinho - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token e produto para adicionar ao carrinho",
                  "const token = pm.environment.get(\"authToken\");",
                  "let productId = pm.environment.get(\"productId\");",
                  "",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Se não tiver productId, usa um existente",
                  "if (!productId) {",
                  "    productId = pm.environment.get(\"existingProductId\");",
                  "    pm.environment.set(\"productId\", productId);",
                  "}",
                  "",
                  "if (!productId) {",
                  "    pm.test(\"Product ID não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "077908fd-1103-4913-9c2b-233be758ac11",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"cartId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
              }
            }
          ]
        },
        "assertions": [
          {
            "assertion": "Token não encontrado",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Token não encontrado",
              "message": "Execute o login primeiro para obter o token",
              "stack": "AssertionError: Execute o login primeiro para obter o token\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "Product ID não encontrado",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Product ID não encontrado",
              "message": "Execute a listagem de produtos ou cadastre um produto primeiro",
              "stack": "AssertionError: Execute a listagem de produtos ou cadastre um produto primeiro\n   at Object.eval sandbox-script.js:2:17)"
            }
          },
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:17)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:17)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:17)"
            }
          },
          {
            "assertion": "Status code é 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 201",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "Response tem propriedades obrigatórias",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response tem propriedades obrigatórias",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)"
            }
          },
          {
            "assertion": "Message de sucesso",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Message de sucesso",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:17)"
            }
          },
          {
            "assertion": "ID do carrinho é válido",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "ID do carrinho é válido",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:17)"
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "carrinhos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{authToken}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e075fedf-ff0c-42ad-bf12-82a5a3d2bdb7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"\",\n      \"quantidade\": 2\n    }\n  ]\n}"
          }
        },
        "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        }
      },
      {
        "cursor": {
          "ref": "ceff13d0-d9d8-4f40-afe7-7bbad5bd3067",
          "length": 28,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f6a49e9e-13b7-4758-acb2-3e623eff6472"
        },
        "item": {
          "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
          "name": "Cadastrar Carrinho - Sem Token",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "carrinhos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "020122af-db2b-4494-bdfc-803d6bd4aa55",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"\",\n      \"quantidade\": 1\n    }\n  ]\n}"
          }
        },
        "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:18)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:18)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:18)"
            }
          },
          {
            "assertion": "Status code é 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 401",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "Message de erro de token",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de erro de token",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "80b082a9-b500-42b1-bf53-ca6cd233a1e2",
          "length": 28,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ac135690-bae9-41a1-9576-6e83fd267d19"
        },
        "item": {
          "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
          "name": "Cadastrar Carrinho - Produto Inexistente",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de produto não encontrado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "carrinhos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{authToken}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ee10b456-f94c-456b-9b4a-ca666e7c5265",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
          }
        },
        "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:19)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:19)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:19)"
            }
          },
          {
            "assertion": "Status code é 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "Message de erro de produto não encontrado",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de erro de produto não encontrado",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "218fe47e-d711-425f-9c91-04b7bf918541",
          "length": 28,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8142eb95-3441-4564-82f5-25808d65e552"
        },
        "item": {
          "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
          "name": "Buscar Carrinho por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "{{cartId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData).to.have.property('precoTotal');",
                  "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                  "    pm.expect(jsonData).to.have.property('idUsuario');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"cartId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "carrinhos",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9ad7733e-578c-42f9-a8b4-9c400c6dd013",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:20)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:20)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:20)"
            }
          },
          {
            "assertion": "Status code é 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "Response tem propriedades obrigatórias",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response tem propriedades obrigatórias",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)"
            }
          },
          {
            "assertion": "ID do carrinho corresponde ao solicitado",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "ID do carrinho corresponde ao solicitado",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "bf42148d-32d9-43d3-86b5-595f2b4d3449",
          "length": 28,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d624d6ed-d57f-4075-bcce-faccd86e3e7a"
        },
        "item": {
          "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
          "name": "Buscar Carrinho por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "carrinhoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "carrinhos",
              "carrinhoInexistente123"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9b340268-95d7-45e6-81c9-d5df5c70eff2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:21)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:21)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:21)"
            }
          },
          {
            "assertion": "Status code é 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "Message de erro correto",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de erro correto",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3af485bc-e363-4c07-9058-d981ac04befa",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8aeaf9c0-01fe-4c1a-b1dc-823481f8dccb"
        },
        "item": {
          "id": "39995f61-108c-470e-8b69-926b97624fb0",
          "name": "Concluir Compra - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "concluir-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Não foi encontrado carrinho para esse usuário\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});",
                  "",
                  "// Limpa o cartId se a compra foi concluída com sucesso",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.message === \"Registro excluído com sucesso\") {",
                  "    pm.environment.unset(\"cartId\");",
                  "}"
                ],
                "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
              }
            }
          ]
        },
        "assertions": [
          {
            "assertion": "Token não encontrado",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Token não encontrado",
              "message": "Execute o login primeiro para obter o token",
              "stack": "AssertionError: Execute o login primeiro para obter o token\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:22)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:22)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:22)"
            }
          },
          {
            "assertion": "Status code é 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "Message de sucesso ou aviso",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de sucesso ou aviso",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "carrinhos",
              "concluir-compra"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{authToken}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dd037d0a-b72a-42dd-8391-e9d1ba45fcf2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "id": "39995f61-108c-470e-8b69-926b97624fb0",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token u in JSON at position 0",
              "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
              "id": "6f813bc3-91ae-428a-bf6b-39ca078028cf",
              "timestamp": 1756255605860,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "12df333f-d51c-4b1d-be09-2a66532f7df2",
          "length": 28,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5ee6b57f-5652-4e30-8405-aa336e6092b5"
        },
        "item": {
          "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
          "name": "Cancelar Compra - Token Inválido",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "cancelar-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "carrinhos",
              "cancelar-compra"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4e01034b-0d4e-4796-8d9e-03af339c7a7d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:23)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:23)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:23)"
            }
          },
          {
            "assertion": "Status code é 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 401",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "Message de erro de token",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de erro de token",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "64d69bbe-dd93-4c5a-96bf-7a1d7f9dfff2",
          "length": 28,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4ae8905d-8547-4567-b37f-889a97f4ba9b"
        },
        "item": {
          "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
          "name": "Excluir Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "produtos",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{authToken}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6c7601d1-9e3e-470a-a05a-0e220cabbcc2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:24)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:24)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:24)"
            }
          },
          {
            "assertion": "Status code é 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "Message de sucesso ou aviso",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de sucesso ou aviso",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9510b2f4-2a43-4fc5-820f-d1ece1e94ccb",
          "length": 28,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1fe1596e-8c80-48ea-917c-1f2bf485679c"
        },
        "item": {
          "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
          "name": "Excluir Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "usuarios",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f9bcfc58-7b9f-4c90-9209-493b394eaea3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:25)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:25)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:25)"
            }
          },
          {
            "assertion": "Status code é 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "Message de sucesso ou aviso",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de sucesso ou aviso",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "19590b1f-1d67-47cd-abb1-95b86a0ef915",
          "length": 28,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0f4b132c-81cd-4786-8e84-c618fe439001"
        },
        "item": {
          "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
          "name": "Cadastrar Usuário - Campos Vazios",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erros de validação\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "});"
                ],
                "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "usuarios"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "44036fe9-352e-4960-b57e-430d6b77f73a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
          }
        },
        "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:26)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:26)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:26)"
            }
          },
          {
            "assertion": "Status code é 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "Response contém erros de validação",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contém erros de validação",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c68971b0-9b6d-4772-81c1-872c4f6e0e3b",
          "length": 28,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4a08b1ef-143e-4792-9e06-4944c34e6e64"
        },
        "item": {
          "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
          "name": "Cadastrar Produto - Preço Negativo",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erro de validação de preço\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "});"
                ],
                "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "produtos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{authToken}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ec3434ff-a9ab-460a-a033-95b2c8db4037",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
          }
        },
        "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:27)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:27)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:27)"
            }
          },
          {
            "assertion": "Status code é 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "Response contém erro de validação de preço",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contém erro de validação de preço",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "67dac1f2-c38c-4e60-b4fe-59b4f0c4499b",
          "length": 28,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f1e7f78c-09f8-4c91-b5ee-dbe647ab7761"
        },
        "item": {
          "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
          "name": "Cadastrar Carrinho - Quantidade Excessiva",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74f41699-8194-4067-b4cf-21b282160563",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                  "});"
                ],
                "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "carrinhos"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{authToken}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4f34b2a7-0858-42de-a763-373ec5d05be6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
          }
        },
        "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000
        },
        "assertions": [
          {
            "assertion": "Response é JSON válido",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response é JSON válido",
              "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
              "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "Response time é aceitável",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time é aceitável",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:28)"
            }
          },
          {
            "assertion": "Content-Type correto",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Content-Type correto",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:28)"
            }
          },
          {
            "assertion": "Não há vazamento de dados sensíveis",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Não há vazamento de dados sensíveis",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:28)"
            }
          },
          {
            "assertion": "Status code é 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code é 400",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "Message de erro de quantidade insuficiente",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Message de erro de quantidade insuficiente",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "e3176828-a1c5-4e95-86f6-f68447f513e7",
          "timestamp": 1756255605324,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c656aaba-93b7-4836-8159-89839be87c48",
          "name": "Login - Sucesso",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "95088ca0-d484-48ec-829d-d65de0324c39",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"fulano@qa.com\",\n  \"password\": \"teste\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                "type": "text/javascript",
                "exec": [
                  "// Limpa tokens anteriores",
                  "pm.environment.unset(\"authToken\");",
                  "",
                  "// Define credenciais de admin para login",
                  "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                  "pm.environment.set(\"loginPassword\", \"teste\");"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('authorization');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"Token é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                  "    // Salva o token para usar em outras requisições",
                  "    pm.environment.set(\"authToken\", jsonData.authorization);",
                  "});",
                  "",
                  "pm.test(\"Response time é menor que 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "334ad2a3-a039-4a56-9861-852e298462fe",
          "httpRequestId": "37eb1079-e5f5-48bb-9288-edb4bffbe8de"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "d924aabee63d5f5cb2c567a16936908e",
          "id": "611b5944-5c72-4fa7-83ad-0de7bd028614",
          "timestamp": 1756255605334,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c656aaba-93b7-4836-8159-89839be87c48",
          "name": "Login - Sucesso",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                "type": "text/javascript",
                "exec": [
                  "// Limpa tokens anteriores",
                  "pm.environment.unset(\"authToken\");",
                  "",
                  "// Define credenciais de admin para login",
                  "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                  "pm.environment.set(\"loginPassword\", \"teste\");"
                ],
                "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('authorization');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"Token é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                  "    // Salva o token para usar em outras requisições",
                  "    pm.environment.set(\"authToken\", jsonData.authorization);",
                  "});",
                  "",
                  "pm.test(\"Response time é menor que 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "334ad2a3-a039-4a56-9861-852e298462fe",
          "httpRequestId": "37eb1079-e5f5-48bb-9288-edb4bffbe8de",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "d367f07f-49ce-446a-b1bd-48669274749b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "8471fd5e58a0c92a6647b7d17bbec0aa",
          "id": "b8389fa0-8bf2-43b0-bd7c-1229481e7d9c",
          "timestamp": 1756255605335,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c656aaba-93b7-4836-8159-89839be87c48",
          "name": "Login - Sucesso",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                "type": "text/javascript",
                "exec": [
                  "// Limpa tokens anteriores",
                  "pm.environment.unset(\"authToken\");",
                  "",
                  "// Define credenciais de admin para login",
                  "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                  "pm.environment.set(\"loginPassword\", \"teste\");"
                ],
                "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('authorization');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"Token é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                  "    // Salva o token para usar em outras requisições",
                  "    pm.environment.set(\"authToken\", jsonData.authorization);",
                  "});",
                  "",
                  "pm.test(\"Response time é menor que 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "334ad2a3-a039-4a56-9861-852e298462fe",
          "httpRequestId": "37eb1079-e5f5-48bb-9288-edb4bffbe8de",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "d367f07f-49ce-446a-b1bd-48669274749b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "1527508070e7446d254134e7ce6a3872",
          "id": "c0d90ef5-6233-4ba5-b4ad-50d2b5ca5241",
          "timestamp": 1756255605336,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "c656aaba-93b7-4836-8159-89839be87c48",
          "name": "Login - Sucesso",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                "type": "text/javascript",
                "exec": [
                  "// Limpa tokens anteriores",
                  "pm.environment.unset(\"authToken\");",
                  "",
                  "// Define credenciais de admin para login",
                  "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                  "pm.environment.set(\"loginPassword\", \"teste\");"
                ],
                "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('authorization');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"Token é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                  "    // Salva o token para usar em outras requisições",
                  "    pm.environment.set(\"authToken\", jsonData.authorization);",
                  "});",
                  "",
                  "pm.test(\"Response time é menor que 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "334ad2a3-a039-4a56-9861-852e298462fe",
          "httpRequestId": "37eb1079-e5f5-48bb-9288-edb4bffbe8de",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "d367f07f-49ce-446a-b1bd-48669274749b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:1)",
          "checksum": "e299e4a122a55099a2a2c34f9d30f5e4",
          "id": "a1971851-43d3-4e43-83b6-e474fbe2f145",
          "timestamp": 1756255605336,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "c656aaba-93b7-4836-8159-89839be87c48",
          "name": "Login - Sucesso",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                "type": "text/javascript",
                "exec": [
                  "// Limpa tokens anteriores",
                  "pm.environment.unset(\"authToken\");",
                  "",
                  "// Define credenciais de admin para login",
                  "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                  "pm.environment.set(\"loginPassword\", \"teste\");"
                ],
                "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('authorization');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"Token é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                  "    // Salva o token para usar em outras requisições",
                  "    pm.environment.set(\"authToken\", jsonData.authorization);",
                  "});",
                  "",
                  "pm.test(\"Response time é menor que 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "334ad2a3-a039-4a56-9861-852e298462fe",
          "httpRequestId": "37eb1079-e5f5-48bb-9288-edb4bffbe8de",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "d367f07f-49ce-446a-b1bd-48669274749b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "fbb929465886ec612c91ef9226f46ae8",
          "id": "63ebc94f-64bb-4503-8951-19d2ace185c0",
          "timestamp": 1756255605341,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c656aaba-93b7-4836-8159-89839be87c48",
          "name": "Login - Sucesso",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                "type": "text/javascript",
                "exec": [
                  "// Limpa tokens anteriores",
                  "pm.environment.unset(\"authToken\");",
                  "",
                  "// Define credenciais de admin para login",
                  "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                  "pm.environment.set(\"loginPassword\", \"teste\");"
                ],
                "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('authorization');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"Token é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                  "    // Salva o token para usar em outras requisições",
                  "    pm.environment.set(\"authToken\", jsonData.authorization);",
                  "});",
                  "",
                  "pm.test(\"Response time é menor que 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "334ad2a3-a039-4a56-9861-852e298462fe",
          "httpRequestId": "37eb1079-e5f5-48bb-9288-edb4bffbe8de",
          "scriptId": "31affc4f-a9c2-4703-81a2-0f5016b08956",
          "execution": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response tem propriedades obrigatórias",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "2f8d874e3e4f2573eb9cb2fe216a3231",
          "id": "8d427dfc-4892-4bf8-a2c8-5fc413b2a8cb",
          "timestamp": 1756255605342,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c656aaba-93b7-4836-8159-89839be87c48",
          "name": "Login - Sucesso",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                "type": "text/javascript",
                "exec": [
                  "// Limpa tokens anteriores",
                  "pm.environment.unset(\"authToken\");",
                  "",
                  "// Define credenciais de admin para login",
                  "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                  "pm.environment.set(\"loginPassword\", \"teste\");"
                ],
                "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('authorization');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"Token é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                  "    // Salva o token para usar em outras requisições",
                  "    pm.environment.set(\"authToken\", jsonData.authorization);",
                  "});",
                  "",
                  "pm.test(\"Response time é menor que 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "334ad2a3-a039-4a56-9861-852e298462fe",
          "httpRequestId": "37eb1079-e5f5-48bb-9288-edb4bffbe8de",
          "scriptId": "31affc4f-a9c2-4703-81a2-0f5016b08956",
          "execution": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Message de sucesso",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:1)",
          "checksum": "1e76a858f8a164719f658cc978f5575a",
          "id": "7c482652-8fe5-4de5-86fe-2a5bd3606122",
          "timestamp": 1756255605342,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "c656aaba-93b7-4836-8159-89839be87c48",
          "name": "Login - Sucesso",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                "type": "text/javascript",
                "exec": [
                  "// Limpa tokens anteriores",
                  "pm.environment.unset(\"authToken\");",
                  "",
                  "// Define credenciais de admin para login",
                  "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                  "pm.environment.set(\"loginPassword\", \"teste\");"
                ],
                "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('authorization');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"Token é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                  "    // Salva o token para usar em outras requisições",
                  "    pm.environment.set(\"authToken\", jsonData.authorization);",
                  "});",
                  "",
                  "pm.test(\"Response time é menor que 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "334ad2a3-a039-4a56-9861-852e298462fe",
          "httpRequestId": "37eb1079-e5f5-48bb-9288-edb4bffbe8de",
          "scriptId": "31affc4f-a9c2-4703-81a2-0f5016b08956",
          "execution": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Token é válido",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:1)",
          "checksum": "4d4dbc2733baadf1c2f8b94dba7eafb0",
          "id": "6374746c-eef4-4895-92bb-53d3161d18cd",
          "timestamp": 1756255605342,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "c656aaba-93b7-4836-8159-89839be87c48",
          "name": "Login - Sucesso",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                "type": "text/javascript",
                "exec": [
                  "// Limpa tokens anteriores",
                  "pm.environment.unset(\"authToken\");",
                  "",
                  "// Define credenciais de admin para login",
                  "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                  "pm.environment.set(\"loginPassword\", \"teste\");"
                ],
                "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('authorization');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"Token é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                  "    // Salva o token para usar em outras requisições",
                  "    pm.environment.set(\"authToken\", jsonData.authorization);",
                  "});",
                  "",
                  "pm.test(\"Response time é menor que 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "334ad2a3-a039-4a56-9861-852e298462fe",
          "httpRequestId": "37eb1079-e5f5-48bb-9288-edb4bffbe8de",
          "scriptId": "31affc4f-a9c2-4703-81a2-0f5016b08956",
          "execution": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Response time é menor que 2000ms",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:5:1)",
          "checksum": "7e5b16cdc50af5f749235614862206fc",
          "id": "fbc737cb-f87e-4e68-8e38-734ba516d790",
          "timestamp": 1756255605343,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "c656aaba-93b7-4836-8159-89839be87c48",
          "name": "Login - Sucesso",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                "type": "text/javascript",
                "exec": [
                  "// Limpa tokens anteriores",
                  "pm.environment.unset(\"authToken\");",
                  "",
                  "// Define credenciais de admin para login",
                  "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                  "pm.environment.set(\"loginPassword\", \"teste\");"
                ],
                "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('authorization');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"Token é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                  "    // Salva o token para usar em outras requisições",
                  "    pm.environment.set(\"authToken\", jsonData.authorization);",
                  "});",
                  "",
                  "pm.test(\"Response time é menor que 2000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ],
                "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 28,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "334ad2a3-a039-4a56-9861-852e298462fe",
          "httpRequestId": "37eb1079-e5f5-48bb-9288-edb4bffbe8de",
          "scriptId": "31affc4f-a9c2-4703-81a2-0f5016b08956",
          "execution": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "c1fcf8c3-d992-41dc-9b6a-637f8f4f72bc",
          "timestamp": 1756255605359,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
          "name": "Login - Credenciais Inválidas",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "a3725761-ec6c-488d-8f38-617dee9fc7bc",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('authorization');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "6f62176d-52e0-4a4c-83c4-d5d07452f069",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4646cf1a-e9a6-4165-9325-7635f76d32ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "1704c0ec849ccb773ca0878cece97cff",
          "id": "fdd7692a-8d18-4111-854e-c831061e6c92",
          "timestamp": 1756255605364,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
          "name": "Login - Credenciais Inválidas",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('authorization');",
                  "});"
                ],
                "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f62176d-52e0-4a4c-83c4-d5d07452f069",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4646cf1a-e9a6-4165-9325-7635f76d32ce",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "6abf5724-a012-45fc-b405-5b4c1cb7398f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "1c33e502bcfac373c322499b48c739ba",
          "id": "d329d693-9a51-4b86-b521-61d895b30007",
          "timestamp": 1756255605364,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
          "name": "Login - Credenciais Inválidas",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('authorization');",
                  "});"
                ],
                "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f62176d-52e0-4a4c-83c4-d5d07452f069",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4646cf1a-e9a6-4165-9325-7635f76d32ce",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "6abf5724-a012-45fc-b405-5b4c1cb7398f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:2)",
          "checksum": "4a2c6ff3a539376148ee6caa77d83fc5",
          "id": "c19207fe-1670-4d76-85bd-232c6434909b",
          "timestamp": 1756255605365,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
          "name": "Login - Credenciais Inválidas",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('authorization');",
                  "});"
                ],
                "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f62176d-52e0-4a4c-83c4-d5d07452f069",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4646cf1a-e9a6-4165-9325-7635f76d32ce",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "6abf5724-a012-45fc-b405-5b4c1cb7398f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:2)",
          "checksum": "6d52709485d642991cffb560c13e13a1",
          "id": "ee03acf2-a64c-45cf-bf6d-96e5f06efcf8",
          "timestamp": 1756255605365,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
          "name": "Login - Credenciais Inválidas",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('authorization');",
                  "});"
                ],
                "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f62176d-52e0-4a4c-83c4-d5d07452f069",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4646cf1a-e9a6-4165-9325-7635f76d32ce",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "6abf5724-a012-45fc-b405-5b4c1cb7398f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 401",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "780e5ea1e7705e8a0373467b03d84e16",
          "id": "5a5fe503-ee9b-49a2-93ab-aec477864ad0",
          "timestamp": 1756255605369,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
          "name": "Login - Credenciais Inválidas",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('authorization');",
                  "});"
                ],
                "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f62176d-52e0-4a4c-83c4-d5d07452f069",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4646cf1a-e9a6-4165-9325-7635f76d32ce",
          "scriptId": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
          "execution": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de erro correto",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "d637e69573c74bd907557623d0d6556b",
          "id": "e71edbb5-c2fc-4239-82e6-68b26e95f1d3",
          "timestamp": 1756255605369,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
          "name": "Login - Credenciais Inválidas",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('authorization');",
                  "});"
                ],
                "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f62176d-52e0-4a4c-83c4-d5d07452f069",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4646cf1a-e9a6-4165-9325-7635f76d32ce",
          "scriptId": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
          "execution": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Não retorna token",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:2)",
          "checksum": "fb360bc4871d55d1e1f4cd9cfd027908",
          "id": "a0cd8a13-1925-4e05-aee7-33d3e7acf3e2",
          "timestamp": 1756255605370,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
          "name": "Login - Credenciais Inválidas",
          "request": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('authorization');",
                  "});"
                ],
                "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
              }
            }
          ]
        },
        "parent": {
          "id": "48961698-d551-4b3d-afcc-591047d9eb3d",
          "name": "1. Setup & Auth",
          "item": [
            {
              "id": "c656aaba-93b7-4836-8159-89839be87c48",
              "name": "Login - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"{{loginEmail}}\",\n  \"password\": \"{{loginPassword}}\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e7b1c905-fdbe-4295-91fe-2ce9b817cc7c",
                    "type": "text/javascript",
                    "exec": [
                      "// Limpa tokens anteriores",
                      "pm.environment.unset(\"authToken\");",
                      "",
                      "// Define credenciais de admin para login",
                      "pm.environment.set(\"loginEmail\", \"fulano@qa.com\");",
                      "pm.environment.set(\"loginPassword\", \"teste\");"
                    ],
                    "_lastExecutionId": "2c61b2bd-adce-46e4-9074-6b3a57056f56"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "31affc4f-a9c2-4703-81a2-0f5016b08956",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('authorization');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Login realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"Token é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.authorization).to.contain(\"Bearer\");",
                      "    // Salva o token para usar em outras requisições",
                      "    pm.environment.set(\"authToken\", jsonData.authorization);",
                      "});",
                      "",
                      "pm.test(\"Response time é menor que 2000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});"
                    ],
                    "_lastExecutionId": "8d0977fb-0e17-428b-8e9b-b0ace4e29e8e"
                  }
                }
              ]
            },
            {
              "id": "6421a789-eea3-43fe-8db5-4d72d92cb874",
              "name": "Login - Credenciais Inválidas",
              "request": {
                "url": {
                  "path": [
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"invalido@email.com\",\n  \"password\": \"senhaerrada\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Email e/ou senha inválidos\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('authorization');",
                      "});"
                    ],
                    "_lastExecutionId": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f62176d-52e0-4a4c-83c4-d5d07452f069",
          "length": 28,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4646cf1a-e9a6-4165-9325-7635f76d32ce",
          "scriptId": "16baf5f3-b5e9-42e4-b55f-21fec57bec73",
          "execution": "39ec9b34-e5a3-426b-a189-3e21fee191ae"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "ef7a75e9-f2ac-44f3-8f48-88dd23266fd7",
          "timestamp": 1756255605386,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
          "name": "Listar Usuários",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "usuarios"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "c44e0f65-a73b-4c7f-8090-159c9c3e18f7",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('usuarios');",
                  "    pm.expect(jsonData.usuarios).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                  "});",
                  "",
                  "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        const usuario = jsonData.usuarios[0];",
                  "        pm.expect(usuario).to.have.property('nome');",
                  "        pm.expect(usuario).to.have.property('email');",
                  "        pm.expect(usuario).to.have.property('password');",
                  "        pm.expect(usuario).to.have.property('administrador');",
                  "        pm.expect(usuario).to.have.property('_id');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Administrador é true ou false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        jsonData.usuarios.forEach(usuario => {",
                  "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "44c150c7-a6a5-4612-8195-063f679446a2",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3ebe1e5d-5ecf-4d60-83e5-69a1e2c901a4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "fa49b8b0a2ce0b293a2eea50f32f4846",
          "id": "b4593554-32dd-41f8-a79d-37b20a2716da",
          "timestamp": 1756255605391,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
          "name": "Listar Usuários",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('usuarios');",
                  "    pm.expect(jsonData.usuarios).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                  "});",
                  "",
                  "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        const usuario = jsonData.usuarios[0];",
                  "        pm.expect(usuario).to.have.property('nome');",
                  "        pm.expect(usuario).to.have.property('email');",
                  "        pm.expect(usuario).to.have.property('password');",
                  "        pm.expect(usuario).to.have.property('administrador');",
                  "        pm.expect(usuario).to.have.property('_id');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Administrador é true ou false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        jsonData.usuarios.forEach(usuario => {",
                  "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "44c150c7-a6a5-4612-8195-063f679446a2",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3ebe1e5d-5ecf-4d60-83e5-69a1e2c901a4",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "ee7af861-eba9-40d4-8921-852c66ebd919"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "09e53f5beacb54219ec2f425a0ec5244",
          "id": "e9c1e9b7-d69a-40d3-961e-05fab1b06674",
          "timestamp": 1756255605391,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
          "name": "Listar Usuários",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('usuarios');",
                  "    pm.expect(jsonData.usuarios).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                  "});",
                  "",
                  "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        const usuario = jsonData.usuarios[0];",
                  "        pm.expect(usuario).to.have.property('nome');",
                  "        pm.expect(usuario).to.have.property('email');",
                  "        pm.expect(usuario).to.have.property('password');",
                  "        pm.expect(usuario).to.have.property('administrador');",
                  "        pm.expect(usuario).to.have.property('_id');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Administrador é true ou false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        jsonData.usuarios.forEach(usuario => {",
                  "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "44c150c7-a6a5-4612-8195-063f679446a2",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3ebe1e5d-5ecf-4d60-83e5-69a1e2c901a4",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "ee7af861-eba9-40d4-8921-852c66ebd919"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:3)",
          "checksum": "1f54c2587bef8c67311643ffed3ce1f3",
          "id": "3abee922-f7c1-48f3-ac16-a80bac32d213",
          "timestamp": 1756255605391,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
          "name": "Listar Usuários",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('usuarios');",
                  "    pm.expect(jsonData.usuarios).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                  "});",
                  "",
                  "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        const usuario = jsonData.usuarios[0];",
                  "        pm.expect(usuario).to.have.property('nome');",
                  "        pm.expect(usuario).to.have.property('email');",
                  "        pm.expect(usuario).to.have.property('password');",
                  "        pm.expect(usuario).to.have.property('administrador');",
                  "        pm.expect(usuario).to.have.property('_id');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Administrador é true ou false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        jsonData.usuarios.forEach(usuario => {",
                  "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "44c150c7-a6a5-4612-8195-063f679446a2",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3ebe1e5d-5ecf-4d60-83e5-69a1e2c901a4",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "ee7af861-eba9-40d4-8921-852c66ebd919"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:3)",
          "checksum": "56b376678a6373c7f17bee14351816bc",
          "id": "1a12d16c-cdaa-4ab6-b53d-8df23601e11a",
          "timestamp": 1756255605392,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
          "name": "Listar Usuários",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('usuarios');",
                  "    pm.expect(jsonData.usuarios).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                  "});",
                  "",
                  "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        const usuario = jsonData.usuarios[0];",
                  "        pm.expect(usuario).to.have.property('nome');",
                  "        pm.expect(usuario).to.have.property('email');",
                  "        pm.expect(usuario).to.have.property('password');",
                  "        pm.expect(usuario).to.have.property('administrador');",
                  "        pm.expect(usuario).to.have.property('_id');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Administrador é true ou false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        jsonData.usuarios.forEach(usuario => {",
                  "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "44c150c7-a6a5-4612-8195-063f679446a2",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3ebe1e5d-5ecf-4d60-83e5-69a1e2c901a4",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "ee7af861-eba9-40d4-8921-852c66ebd919"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "86710294fe413b5609f1715ee61bb575",
          "id": "0aff82f9-2521-41ba-8e1a-608d5d3b0a39",
          "timestamp": 1756255605405,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
          "name": "Listar Usuários",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('usuarios');",
                  "    pm.expect(jsonData.usuarios).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                  "});",
                  "",
                  "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        const usuario = jsonData.usuarios[0];",
                  "        pm.expect(usuario).to.have.property('nome');",
                  "        pm.expect(usuario).to.have.property('email');",
                  "        pm.expect(usuario).to.have.property('password');",
                  "        pm.expect(usuario).to.have.property('administrador');",
                  "        pm.expect(usuario).to.have.property('_id');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Administrador é true ou false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        jsonData.usuarios.forEach(usuario => {",
                  "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "44c150c7-a6a5-4612-8195-063f679446a2",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3ebe1e5d-5ecf-4d60-83e5-69a1e2c901a4",
          "scriptId": "7617452b-b4ba-4129-b50b-c90ffb10df89",
          "execution": "7717f8ca-8955-42ad-a617-27a954508c92"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response tem estrutura correta",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "51affe06654531ceaaec8ad06b1d3f66",
          "id": "a4e9b9aa-1bc2-436b-b3ba-b6c2a030eda1",
          "timestamp": 1756255605406,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
          "name": "Listar Usuários",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('usuarios');",
                  "    pm.expect(jsonData.usuarios).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                  "});",
                  "",
                  "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        const usuario = jsonData.usuarios[0];",
                  "        pm.expect(usuario).to.have.property('nome');",
                  "        pm.expect(usuario).to.have.property('email');",
                  "        pm.expect(usuario).to.have.property('password');",
                  "        pm.expect(usuario).to.have.property('administrador');",
                  "        pm.expect(usuario).to.have.property('_id');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Administrador é true ou false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        jsonData.usuarios.forEach(usuario => {",
                  "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "44c150c7-a6a5-4612-8195-063f679446a2",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3ebe1e5d-5ecf-4d60-83e5-69a1e2c901a4",
          "scriptId": "7617452b-b4ba-4129-b50b-c90ffb10df89",
          "execution": "7717f8ca-8955-42ad-a617-27a954508c92"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Quantidade corresponde ao array",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:3)",
          "checksum": "92622b775d8f0e3137336aa092c8f8cd",
          "id": "14316826-50d2-4c67-bfd2-224ba9aac039",
          "timestamp": 1756255605407,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
          "name": "Listar Usuários",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('usuarios');",
                  "    pm.expect(jsonData.usuarios).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                  "});",
                  "",
                  "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        const usuario = jsonData.usuarios[0];",
                  "        pm.expect(usuario).to.have.property('nome');",
                  "        pm.expect(usuario).to.have.property('email');",
                  "        pm.expect(usuario).to.have.property('password');",
                  "        pm.expect(usuario).to.have.property('administrador');",
                  "        pm.expect(usuario).to.have.property('_id');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Administrador é true ou false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        jsonData.usuarios.forEach(usuario => {",
                  "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "44c150c7-a6a5-4612-8195-063f679446a2",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3ebe1e5d-5ecf-4d60-83e5-69a1e2c901a4",
          "scriptId": "7617452b-b4ba-4129-b50b-c90ffb10df89",
          "execution": "7717f8ca-8955-42ad-a617-27a954508c92"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Usuários têm propriedades obrigatórias",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:3)",
          "checksum": "1b9b625bc24b59890bf6919415161652",
          "id": "64696e2b-675d-4d32-8bba-a39cc9e5ec2f",
          "timestamp": 1756255605407,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
          "name": "Listar Usuários",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('usuarios');",
                  "    pm.expect(jsonData.usuarios).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                  "});",
                  "",
                  "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        const usuario = jsonData.usuarios[0];",
                  "        pm.expect(usuario).to.have.property('nome');",
                  "        pm.expect(usuario).to.have.property('email');",
                  "        pm.expect(usuario).to.have.property('password');",
                  "        pm.expect(usuario).to.have.property('administrador');",
                  "        pm.expect(usuario).to.have.property('_id');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Administrador é true ou false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        jsonData.usuarios.forEach(usuario => {",
                  "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "44c150c7-a6a5-4612-8195-063f679446a2",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3ebe1e5d-5ecf-4d60-83e5-69a1e2c901a4",
          "scriptId": "7617452b-b4ba-4129-b50b-c90ffb10df89",
          "execution": "7717f8ca-8955-42ad-a617-27a954508c92"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 4,
          "test": "Administrador é true ou false",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:3)",
          "checksum": "8235087ba86c88baeedc626fa647b72b",
          "id": "5fa361da-78b7-4876-af9a-7aa060593a98",
          "timestamp": 1756255605408,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
          "name": "Listar Usuários",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('usuarios');",
                  "    pm.expect(jsonData.usuarios).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                  "});",
                  "",
                  "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        const usuario = jsonData.usuarios[0];",
                  "        pm.expect(usuario).to.have.property('nome');",
                  "        pm.expect(usuario).to.have.property('email');",
                  "        pm.expect(usuario).to.have.property('password');",
                  "        pm.expect(usuario).to.have.property('administrador');",
                  "        pm.expect(usuario).to.have.property('_id');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Administrador é true ou false\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.usuarios.length > 0) {",
                  "        jsonData.usuarios.forEach(usuario => {",
                  "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "44c150c7-a6a5-4612-8195-063f679446a2",
          "length": 28,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "3ebe1e5d-5ecf-4d60-83e5-69a1e2c901a4",
          "scriptId": "7617452b-b4ba-4129-b50b-c90ffb10df89",
          "execution": "7717f8ca-8955-42ad-a617-27a954508c92"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "956b73e9-dc68-4e08-99ff-ed54b7587b95",
          "timestamp": 1756255605427,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
          "name": "Cadastrar Usuário - Sucesso",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "usuarios"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "9257f19a-2b3d-4351-b841-124d01bc12e0",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Usuario Teste 1756255605422\",\n  \"email\": \"user1756255605422@teste.com\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                "type": "text/javascript",
                "exec": [
                  "// Gera email único para evitar conflitos",
                  "const timestamp = Date.now();",
                  "const randomEmail = `user${timestamp}@teste.com`;",
                  "pm.environment.set(\"uniqueEmail\", randomEmail);",
                  "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do usuário é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"userId\", jsonData._id);",
                  "});",
                  "",
                  "pm.test(\"Content-Type é application/json\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "06604da0-ece3-4a2f-a435-2a1db8389620",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "747d1d1d-1362-4a03-a552-f905d8cbb85c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "8aaa45e59b06ced73d540846d1bcb99c",
          "id": "1f33ab61-0163-4089-82d4-8553d6a52fb5",
          "timestamp": 1756255605432,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
          "name": "Cadastrar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                "type": "text/javascript",
                "exec": [
                  "// Gera email único para evitar conflitos",
                  "const timestamp = Date.now();",
                  "const randomEmail = `user${timestamp}@teste.com`;",
                  "pm.environment.set(\"uniqueEmail\", randomEmail);",
                  "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                ],
                "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do usuário é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"userId\", jsonData._id);",
                  "});",
                  "",
                  "pm.test(\"Content-Type é application/json\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                  "});"
                ],
                "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "06604da0-ece3-4a2f-a435-2a1db8389620",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "747d1d1d-1362-4a03-a552-f905d8cbb85c",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "24fd658c-5b4c-4774-ae89-1832d05b4663"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "fe0a15ce9d98b39756f8666942553814",
          "id": "33cd534e-fda4-4fae-814a-3a36cf6906ac",
          "timestamp": 1756255605433,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
          "name": "Cadastrar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                "type": "text/javascript",
                "exec": [
                  "// Gera email único para evitar conflitos",
                  "const timestamp = Date.now();",
                  "const randomEmail = `user${timestamp}@teste.com`;",
                  "pm.environment.set(\"uniqueEmail\", randomEmail);",
                  "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                ],
                "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do usuário é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"userId\", jsonData._id);",
                  "});",
                  "",
                  "pm.test(\"Content-Type é application/json\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                  "});"
                ],
                "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "06604da0-ece3-4a2f-a435-2a1db8389620",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "747d1d1d-1362-4a03-a552-f905d8cbb85c",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "24fd658c-5b4c-4774-ae89-1832d05b4663"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:4)",
          "checksum": "adc4f4df49f0807946ac7ad8dd276bfb",
          "id": "67c00160-74d7-4f5a-9911-722cab26889a",
          "timestamp": 1756255605433,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
          "name": "Cadastrar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                "type": "text/javascript",
                "exec": [
                  "// Gera email único para evitar conflitos",
                  "const timestamp = Date.now();",
                  "const randomEmail = `user${timestamp}@teste.com`;",
                  "pm.environment.set(\"uniqueEmail\", randomEmail);",
                  "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                ],
                "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do usuário é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"userId\", jsonData._id);",
                  "});",
                  "",
                  "pm.test(\"Content-Type é application/json\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                  "});"
                ],
                "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "06604da0-ece3-4a2f-a435-2a1db8389620",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "747d1d1d-1362-4a03-a552-f905d8cbb85c",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "24fd658c-5b4c-4774-ae89-1832d05b4663"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:4)",
          "checksum": "cde861e991d48731fe9a5c929d33012d",
          "id": "99f8b8d6-bf9f-4e12-b0c3-3e3895be195e",
          "timestamp": 1756255605433,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
          "name": "Cadastrar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                "type": "text/javascript",
                "exec": [
                  "// Gera email único para evitar conflitos",
                  "const timestamp = Date.now();",
                  "const randomEmail = `user${timestamp}@teste.com`;",
                  "pm.environment.set(\"uniqueEmail\", randomEmail);",
                  "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                ],
                "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do usuário é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"userId\", jsonData._id);",
                  "});",
                  "",
                  "pm.test(\"Content-Type é application/json\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                  "});"
                ],
                "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "06604da0-ece3-4a2f-a435-2a1db8389620",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "747d1d1d-1362-4a03-a552-f905d8cbb85c",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "24fd658c-5b4c-4774-ae89-1832d05b4663"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 201",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "0092633b5ddda0fc8aa12048ced9d2a7",
          "id": "bd34753f-a914-4aef-847f-66b85132c0bf",
          "timestamp": 1756255605437,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
          "name": "Cadastrar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                "type": "text/javascript",
                "exec": [
                  "// Gera email único para evitar conflitos",
                  "const timestamp = Date.now();",
                  "const randomEmail = `user${timestamp}@teste.com`;",
                  "pm.environment.set(\"uniqueEmail\", randomEmail);",
                  "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                ],
                "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do usuário é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"userId\", jsonData._id);",
                  "});",
                  "",
                  "pm.test(\"Content-Type é application/json\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                  "});"
                ],
                "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "06604da0-ece3-4a2f-a435-2a1db8389620",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "747d1d1d-1362-4a03-a552-f905d8cbb85c",
          "scriptId": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
          "execution": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response tem propriedades obrigatórias",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "e9fe4ee7068ae59f10d08b21a2f7fdfc",
          "id": "44a2fa78-5949-423a-b900-763ece4fd18b",
          "timestamp": 1756255605437,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
          "name": "Cadastrar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                "type": "text/javascript",
                "exec": [
                  "// Gera email único para evitar conflitos",
                  "const timestamp = Date.now();",
                  "const randomEmail = `user${timestamp}@teste.com`;",
                  "pm.environment.set(\"uniqueEmail\", randomEmail);",
                  "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                ],
                "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do usuário é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"userId\", jsonData._id);",
                  "});",
                  "",
                  "pm.test(\"Content-Type é application/json\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                  "});"
                ],
                "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "06604da0-ece3-4a2f-a435-2a1db8389620",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "747d1d1d-1362-4a03-a552-f905d8cbb85c",
          "scriptId": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
          "execution": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Message de sucesso",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:4)",
          "checksum": "1ac178aaecfe9af06ec068d928e629b3",
          "id": "4c5b99bc-a48d-4887-9a6a-857e405b7dd5",
          "timestamp": 1756255605438,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
          "name": "Cadastrar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                "type": "text/javascript",
                "exec": [
                  "// Gera email único para evitar conflitos",
                  "const timestamp = Date.now();",
                  "const randomEmail = `user${timestamp}@teste.com`;",
                  "pm.environment.set(\"uniqueEmail\", randomEmail);",
                  "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                ],
                "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do usuário é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"userId\", jsonData._id);",
                  "});",
                  "",
                  "pm.test(\"Content-Type é application/json\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                  "});"
                ],
                "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "06604da0-ece3-4a2f-a435-2a1db8389620",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "747d1d1d-1362-4a03-a552-f905d8cbb85c",
          "scriptId": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
          "execution": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "ID do usuário é válido",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:4)",
          "checksum": "1157b9f8f648f21db2b0cf233d254e5d",
          "id": "0ab5f173-afcb-4035-8e2b-1e89926803a4",
          "timestamp": 1756255605438,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
          "name": "Cadastrar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                "type": "text/javascript",
                "exec": [
                  "// Gera email único para evitar conflitos",
                  "const timestamp = Date.now();",
                  "const randomEmail = `user${timestamp}@teste.com`;",
                  "pm.environment.set(\"uniqueEmail\", randomEmail);",
                  "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                ],
                "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do usuário é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"userId\", jsonData._id);",
                  "});",
                  "",
                  "pm.test(\"Content-Type é application/json\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                  "});"
                ],
                "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "06604da0-ece3-4a2f-a435-2a1db8389620",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "747d1d1d-1362-4a03-a552-f905d8cbb85c",
          "scriptId": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
          "execution": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Content-Type é application/json",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:5:4)",
          "checksum": "a0f15425064073c535fefe727d6abe5d",
          "id": "dfe69e17-a29d-4160-ab57-2a7e994b24dc",
          "timestamp": 1756255605438,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
          "name": "Cadastrar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                "type": "text/javascript",
                "exec": [
                  "// Gera email único para evitar conflitos",
                  "const timestamp = Date.now();",
                  "const randomEmail = `user${timestamp}@teste.com`;",
                  "pm.environment.set(\"uniqueEmail\", randomEmail);",
                  "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                ],
                "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do usuário é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"userId\", jsonData._id);",
                  "});",
                  "",
                  "pm.test(\"Content-Type é application/json\", function () {",
                  "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                  "});"
                ],
                "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "06604da0-ece3-4a2f-a435-2a1db8389620",
          "length": 28,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "747d1d1d-1362-4a03-a552-f905d8cbb85c",
          "scriptId": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
          "execution": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "823db7b4-f28c-41d8-a831-fe62d3dea045",
          "timestamp": 1756255605453,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "27dcb024-ad03-450b-986a-6903c0720521",
          "name": "Cadastrar Usuário - Email Duplicado",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "usuarios"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "6b2c78ea-439d-4818-93a9-f5d987924433",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Usuario Teste 1756255605422\",\n  \"email\": \"user1756255605422@teste.com\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('_id');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "6add7c52-7825-40ab-9987-1afe9e5f109c",
          "length": 28,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e90e2372-0c45-4ff7-9613-8ed432fd3b50"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "dbb0c14950630e93ac8e3478bd878314",
          "id": "3eade986-be4b-4d1b-8779-5fa88e7767e7",
          "timestamp": 1756255605457,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "27dcb024-ad03-450b-986a-6903c0720521",
          "name": "Cadastrar Usuário - Email Duplicado",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('_id');",
                  "});"
                ],
                "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6add7c52-7825-40ab-9987-1afe9e5f109c",
          "length": 28,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e90e2372-0c45-4ff7-9613-8ed432fd3b50",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "bd103f4b-1241-4fb4-b0d2-68f6097e1d4e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "7dd3ad7177af45f8d43ae1ec0cd043b5",
          "id": "14bab81c-d0d2-41cf-8321-52fc04ea77ad",
          "timestamp": 1756255605457,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "27dcb024-ad03-450b-986a-6903c0720521",
          "name": "Cadastrar Usuário - Email Duplicado",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('_id');",
                  "});"
                ],
                "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6add7c52-7825-40ab-9987-1afe9e5f109c",
          "length": 28,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e90e2372-0c45-4ff7-9613-8ed432fd3b50",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "bd103f4b-1241-4fb4-b0d2-68f6097e1d4e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:5)",
          "checksum": "ba7969a122e9efb1d63bc2391feb8d73",
          "id": "30d13d3b-1cf9-43c4-a7a0-5f36479fcff5",
          "timestamp": 1756255605458,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "27dcb024-ad03-450b-986a-6903c0720521",
          "name": "Cadastrar Usuário - Email Duplicado",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('_id');",
                  "});"
                ],
                "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6add7c52-7825-40ab-9987-1afe9e5f109c",
          "length": 28,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e90e2372-0c45-4ff7-9613-8ed432fd3b50",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "bd103f4b-1241-4fb4-b0d2-68f6097e1d4e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:5)",
          "checksum": "68cc524fbb1d4338b8e130f9eefcf184",
          "id": "a77ce697-f275-44c7-8d18-98f243a6fdbc",
          "timestamp": 1756255605458,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "27dcb024-ad03-450b-986a-6903c0720521",
          "name": "Cadastrar Usuário - Email Duplicado",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('_id');",
                  "});"
                ],
                "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6add7c52-7825-40ab-9987-1afe9e5f109c",
          "length": 28,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e90e2372-0c45-4ff7-9613-8ed432fd3b50",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "bd103f4b-1241-4fb4-b0d2-68f6097e1d4e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "628a92fae87279ab53b2c7398a6f324a",
          "id": "32b3fb29-9ee0-49bd-8960-b582c2554bbe",
          "timestamp": 1756255605462,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "27dcb024-ad03-450b-986a-6903c0720521",
          "name": "Cadastrar Usuário - Email Duplicado",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('_id');",
                  "});"
                ],
                "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6add7c52-7825-40ab-9987-1afe9e5f109c",
          "length": 28,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e90e2372-0c45-4ff7-9613-8ed432fd3b50",
          "scriptId": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
          "execution": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de erro correto",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "18acbd53a0301eecc5b16e8adfc94834",
          "id": "f5bbb785-c7df-4a68-ad5c-73088f675c54",
          "timestamp": 1756255605463,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "27dcb024-ad03-450b-986a-6903c0720521",
          "name": "Cadastrar Usuário - Email Duplicado",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('_id');",
                  "});"
                ],
                "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6add7c52-7825-40ab-9987-1afe9e5f109c",
          "length": 28,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e90e2372-0c45-4ff7-9613-8ed432fd3b50",
          "scriptId": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
          "execution": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Não retorna ID",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:5)",
          "checksum": "d1e4e7b7ea74e48117add7db7f3553be",
          "id": "5f37fd4f-23f3-4a9c-8f6e-e12d94b2c116",
          "timestamp": 1756255605463,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "27dcb024-ad03-450b-986a-6903c0720521",
          "name": "Cadastrar Usuário - Email Duplicado",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                  "});",
                  "",
                  "pm.test(\"Não retorna ID\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.have.property('_id');",
                  "});"
                ],
                "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6add7c52-7825-40ab-9987-1afe9e5f109c",
          "length": 28,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e90e2372-0c45-4ff7-9613-8ed432fd3b50",
          "scriptId": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
          "execution": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "f59609ee-27c8-4df6-a30e-626340b0d70a",
          "timestamp": 1756255605476,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
          "name": "Buscar Usuário por ID - Sucesso",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "usuarios",
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "fb80ffc2-31fb-475a-8f87-69002504f218",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"userId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});",
                  "",
                  "pm.test(\"Email é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                  "    pm.expect(jsonData.email).to.match(emailRegex);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "73c66d12-f0cc-49a7-8e4c-31612cc87bfb",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "652b9bcb-72e7-4990-8985-58674c8ab8f4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "49755c14c043fd0fc0df818aa96f5b78",
          "id": "6f126e0a-5be0-42ac-b85b-116f3a773937",
          "timestamp": 1756255605480,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
          "name": "Buscar Usuário por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"userId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});",
                  "",
                  "pm.test(\"Email é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                  "    pm.expect(jsonData.email).to.match(emailRegex);",
                  "});"
                ],
                "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "73c66d12-f0cc-49a7-8e4c-31612cc87bfb",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "652b9bcb-72e7-4990-8985-58674c8ab8f4",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "44f51248-020f-4d04-ba4b-9464c1b7eb24"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "d5cbf6453e12bde1b8d543a40d00f862",
          "id": "de5d0a17-45eb-4358-bbf8-f09f213df527",
          "timestamp": 1756255605481,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
          "name": "Buscar Usuário por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"userId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});",
                  "",
                  "pm.test(\"Email é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                  "    pm.expect(jsonData.email).to.match(emailRegex);",
                  "});"
                ],
                "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "73c66d12-f0cc-49a7-8e4c-31612cc87bfb",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "652b9bcb-72e7-4990-8985-58674c8ab8f4",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "44f51248-020f-4d04-ba4b-9464c1b7eb24"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:6)",
          "checksum": "7d5c6fcdca04fc6f80387c3dd25b54f3",
          "id": "facfc92e-30e3-4b33-911f-4a5912be7ce3",
          "timestamp": 1756255605481,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
          "name": "Buscar Usuário por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"userId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});",
                  "",
                  "pm.test(\"Email é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                  "    pm.expect(jsonData.email).to.match(emailRegex);",
                  "});"
                ],
                "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "73c66d12-f0cc-49a7-8e4c-31612cc87bfb",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "652b9bcb-72e7-4990-8985-58674c8ab8f4",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "44f51248-020f-4d04-ba4b-9464c1b7eb24"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:6)",
          "checksum": "3f261be69413a9ec2ebb4320ee8cd1a6",
          "id": "af7af156-af7e-4727-8798-29940a8ff206",
          "timestamp": 1756255605481,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
          "name": "Buscar Usuário por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"userId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});",
                  "",
                  "pm.test(\"Email é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                  "    pm.expect(jsonData.email).to.match(emailRegex);",
                  "});"
                ],
                "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "73c66d12-f0cc-49a7-8e4c-31612cc87bfb",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "652b9bcb-72e7-4990-8985-58674c8ab8f4",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "44f51248-020f-4d04-ba4b-9464c1b7eb24"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "7ae9ed2745a12bee4c1ee9120c18a91a",
          "id": "1df6877f-a0e9-4704-a2c0-d02e10aef70b",
          "timestamp": 1756255605485,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
          "name": "Buscar Usuário por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"userId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});",
                  "",
                  "pm.test(\"Email é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                  "    pm.expect(jsonData.email).to.match(emailRegex);",
                  "});"
                ],
                "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "73c66d12-f0cc-49a7-8e4c-31612cc87bfb",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "652b9bcb-72e7-4990-8985-58674c8ab8f4",
          "scriptId": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
          "execution": "e314deb4-cdd5-450e-b309-91113d28d352"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response tem propriedades obrigatórias",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "a20dc17c63664ee26a3ac37b2860262e",
          "id": "60c5a862-23e4-4b4b-abcf-0fec8c20b462",
          "timestamp": 1756255605485,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
          "name": "Buscar Usuário por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"userId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});",
                  "",
                  "pm.test(\"Email é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                  "    pm.expect(jsonData.email).to.match(emailRegex);",
                  "});"
                ],
                "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "73c66d12-f0cc-49a7-8e4c-31612cc87bfb",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "652b9bcb-72e7-4990-8985-58674c8ab8f4",
          "scriptId": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
          "execution": "e314deb4-cdd5-450e-b309-91113d28d352"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "ID do usuário corresponde ao solicitado",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:6)",
          "checksum": "2e9f64602d2f54783153fd4e087ae5d0",
          "id": "27c380f2-1c2a-4b03-abde-ffa426a594fa",
          "timestamp": 1756255605486,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
          "name": "Buscar Usuário por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"userId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});",
                  "",
                  "pm.test(\"Email é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                  "    pm.expect(jsonData.email).to.match(emailRegex);",
                  "});"
                ],
                "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "73c66d12-f0cc-49a7-8e4c-31612cc87bfb",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "652b9bcb-72e7-4990-8985-58674c8ab8f4",
          "scriptId": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
          "execution": "e314deb4-cdd5-450e-b309-91113d28d352"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Email é válido",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:6)",
          "checksum": "8a295fc68ce09d9bc9a1e455b636512d",
          "id": "39495aa0-d755-440b-a0f3-88b4a666f44f",
          "timestamp": 1756255605486,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
          "name": "Buscar Usuário por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"userId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});",
                  "",
                  "pm.test(\"Email é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                  "    pm.expect(jsonData.email).to.match(emailRegex);",
                  "});"
                ],
                "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "73c66d12-f0cc-49a7-8e4c-31612cc87bfb",
          "length": 28,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "652b9bcb-72e7-4990-8985-58674c8ab8f4",
          "scriptId": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
          "execution": "e314deb4-cdd5-450e-b309-91113d28d352"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "c71e93b4-a6dd-4eb9-bc9c-2e65ed493e30",
          "timestamp": 1756255605502,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
          "name": "Buscar Usuário por ID - Não Encontrado",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "usuarios",
                "idInexistente123"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "04f18abd-113f-42a2-923c-0a93c4c31e0c",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "6f929fb8-8c23-4d00-8b19-cde2a6e93c2b",
          "length": 28,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54c82174-6b42-4232-8ff3-4494f53fce05"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "2d7b7e5c7fa6ca404e100ac462258efd",
          "id": "06d4bfa1-4d03-46fb-b604-7382c467281d",
          "timestamp": 1756255605506,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
          "name": "Buscar Usuário por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "idInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f929fb8-8c23-4d00-8b19-cde2a6e93c2b",
          "length": 28,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54c82174-6b42-4232-8ff3-4494f53fce05",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "a83f2f5a-8d53-4850-a775-9fa0bc8e0f36"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "fd459fbe26a7b2df3a94dbc3f8f29877",
          "id": "6510b3d7-668f-4497-8910-6387a23624a0",
          "timestamp": 1756255605506,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
          "name": "Buscar Usuário por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "idInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f929fb8-8c23-4d00-8b19-cde2a6e93c2b",
          "length": 28,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54c82174-6b42-4232-8ff3-4494f53fce05",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "a83f2f5a-8d53-4850-a775-9fa0bc8e0f36"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:7)",
          "checksum": "c1d85b1e4f2f35f309bfac2a89acb547",
          "id": "f64a99c0-9b95-4f26-8841-d57d4f1c393e",
          "timestamp": 1756255605507,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
          "name": "Buscar Usuário por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "idInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f929fb8-8c23-4d00-8b19-cde2a6e93c2b",
          "length": 28,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54c82174-6b42-4232-8ff3-4494f53fce05",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "a83f2f5a-8d53-4850-a775-9fa0bc8e0f36"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:7)",
          "checksum": "7e86159a3f5be35457fcbc0cf0559678",
          "id": "6630d2f3-742f-4fbd-9d4b-ec78a9eda0c7",
          "timestamp": 1756255605507,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
          "name": "Buscar Usuário por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "idInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f929fb8-8c23-4d00-8b19-cde2a6e93c2b",
          "length": 28,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54c82174-6b42-4232-8ff3-4494f53fce05",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "a83f2f5a-8d53-4850-a775-9fa0bc8e0f36"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "f416bbc8442e40c2cda65908eb8ae1f9",
          "id": "24cfed59-4574-466f-86b4-8090bc084d88",
          "timestamp": 1756255605510,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
          "name": "Buscar Usuário por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "idInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f929fb8-8c23-4d00-8b19-cde2a6e93c2b",
          "length": 28,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54c82174-6b42-4232-8ff3-4494f53fce05",
          "scriptId": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
          "execution": "85573226-9e6d-455f-8e93-f974445b8529"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de erro correto",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:7)",
          "checksum": "a447505829ebde3c0f4edf70c10cea35",
          "id": "b5ce5538-e622-4a10-a28c-33aa7a9f4746",
          "timestamp": 1756255605511,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
          "name": "Buscar Usuário por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "idInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6f929fb8-8c23-4d00-8b19-cde2a6e93c2b",
          "length": 28,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "54c82174-6b42-4232-8ff3-4494f53fce05",
          "scriptId": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
          "execution": "85573226-9e6d-455f-8e93-f974445b8529"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "5fc4858f-a90d-4fd8-b6d4-16963e4871c4",
          "timestamp": 1756255605525,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
          "name": "Editar Usuário - Sucesso",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "usuarios",
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d34cf9bf-202c-4ad6-adc7-67aebdfbddce",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Usuario Teste 1756255605422 - Editado\",\n  \"email\": \"user1756255605422@teste.com\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "76e62b71-d081-44c2-b889-9d4274ee2279",
          "length": 28,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "158f879a-928e-4048-8ead-a849b54e7345"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "b34e46da390340342ad3198330de9c5b",
          "id": "893df230-aec8-494a-aa01-8811b3ffe517",
          "timestamp": 1756255605529,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
          "name": "Editar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "76e62b71-d081-44c2-b889-9d4274ee2279",
          "length": 28,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "158f879a-928e-4048-8ead-a849b54e7345",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "e679d417-761e-4b06-bd40-17b8f1a5aca1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "61c23169418f93d6713cf024a0cd334f",
          "id": "efe68acb-04b8-4d24-aabb-a21cc8039e68",
          "timestamp": 1756255605529,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
          "name": "Editar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "76e62b71-d081-44c2-b889-9d4274ee2279",
          "length": 28,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "158f879a-928e-4048-8ead-a849b54e7345",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "e679d417-761e-4b06-bd40-17b8f1a5aca1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:8)",
          "checksum": "a7d7250d4f3a208cbe23bd63a37979c5",
          "id": "ac353699-fff2-4f12-a8dc-57f18a829434",
          "timestamp": 1756255605530,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
          "name": "Editar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "76e62b71-d081-44c2-b889-9d4274ee2279",
          "length": 28,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "158f879a-928e-4048-8ead-a849b54e7345",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "e679d417-761e-4b06-bd40-17b8f1a5aca1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:8)",
          "checksum": "fbee7e14b4758a631710274e6bbc73d4",
          "id": "31c7a135-a01f-4a2c-b818-8ed3bf771439",
          "timestamp": 1756255605530,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
          "name": "Editar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "76e62b71-d081-44c2-b889-9d4274ee2279",
          "length": 28,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "158f879a-928e-4048-8ead-a849b54e7345",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "e679d417-761e-4b06-bd40-17b8f1a5aca1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "0bb935beef0d8835ee9b2ca2a0bf7503",
          "id": "bf76ace9-cfe4-4b52-bfff-3cd1f32ec7b4",
          "timestamp": 1756255605534,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
          "name": "Editar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "76e62b71-d081-44c2-b889-9d4274ee2279",
          "length": 28,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "158f879a-928e-4048-8ead-a849b54e7345",
          "scriptId": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
          "execution": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de sucesso",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "6669b7bf6f9746f8ba24f23e4e574820",
          "id": "d73a7bd0-6e00-4864-bb28-9ad8408c4bc2",
          "timestamp": 1756255605534,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
          "name": "Editar Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
              }
            }
          ]
        },
        "parent": {
          "id": "5f2f3dd7-9fb5-40ac-8d50-e5eb57ad29f0",
          "name": "2. Usuários",
          "item": [
            {
              "id": "52d7ab82-a01d-43c7-97fa-1c126ab3470d",
              "name": "Listar Usuários",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7617452b-b4ba-4129-b50b-c90ffb10df89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('usuarios');",
                      "    pm.expect(jsonData.usuarios).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.usuarios.length);",
                      "});",
                      "",
                      "pm.test(\"Usuários têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        const usuario = jsonData.usuarios[0];",
                      "        pm.expect(usuario).to.have.property('nome');",
                      "        pm.expect(usuario).to.have.property('email');",
                      "        pm.expect(usuario).to.have.property('password');",
                      "        pm.expect(usuario).to.have.property('administrador');",
                      "        pm.expect(usuario).to.have.property('_id');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Administrador é true ou false\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.usuarios.length > 0) {",
                      "        jsonData.usuarios.forEach(usuario => {",
                      "            pm.expect(['true', 'false']).to.include(usuario.administrador);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "7717f8ca-8955-42ad-a617-27a954508c92"
                  }
                }
              ]
            },
            {
              "id": "0d81fe52-1020-4aec-88f8-e8be92429657",
              "name": "Cadastrar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4e0977e-27ca-44ab-acfe-05fe3e5e4dd0",
                    "type": "text/javascript",
                    "exec": [
                      "// Gera email único para evitar conflitos",
                      "const timestamp = Date.now();",
                      "const randomEmail = `user${timestamp}@teste.com`;",
                      "pm.environment.set(\"uniqueEmail\", randomEmail);",
                      "pm.environment.set(\"uniqueName\", `Usuario Teste ${timestamp}`);"
                    ],
                    "_lastExecutionId": "837849c4-8aff-4b7c-801b-649ea52d72e3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e2109a96-bdb3-42d0-b9f9-1d5feb5ee49b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do usuário é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"userId\", jsonData._id);",
                      "});",
                      "",
                      "pm.test(\"Content-Type é application/json\", function () {",
                      "    pm.expect(pm.response.headers.get('Content-Type')).to.contain('application/json');",
                      "});"
                    ],
                    "_lastExecutionId": "22e61935-fc2e-4a35-b2c1-8fdfba543e41"
                  }
                }
              ]
            },
            {
              "id": "27dcb024-ad03-450b-986a-6903c0720521",
              "name": "Cadastrar Usuário - Email Duplicado",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}}\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"teste123\",\n  \"administrador\": \"false\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fcba7d6-10ff-4c09-ab23-f5bc67943def",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Este email já está sendo usado\");",
                      "});",
                      "",
                      "pm.test(\"Não retorna ID\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.have.property('_id');",
                      "});"
                    ],
                    "_lastExecutionId": "bf22c91a-51cc-4a48-8b19-a98ec34792b3"
                  }
                }
              ]
            },
            {
              "id": "3420d8bf-1754-438a-844e-6d246e5c2ebf",
              "name": "Buscar Usuário por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41cea0c8-3a00-4632-a0d0-f91f8d712a0c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do usuário corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"userId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});",
                      "",
                      "pm.test(\"Email é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
                      "    pm.expect(jsonData.email).to.match(emailRegex);",
                      "});"
                    ],
                    "_lastExecutionId": "e314deb4-cdd5-450e-b309-91113d28d352"
                  }
                }
              ]
            },
            {
              "id": "cb0a60ed-dec1-4f2b-bfe0-9e9209b4af87",
              "name": "Buscar Usuário por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "idInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80d1716-6aa7-40ba-b5ff-ae45e3360b25",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Usuário não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "85573226-9e6d-455f-8e93-f974445b8529"
                  }
                }
              ]
            },
            {
              "id": "b9ffae6c-9ce0-465f-b7ee-5b09dbc24597",
              "name": "Editar Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueName}} - Editado\",\n  \"email\": \"{{uniqueEmail}}\",\n  \"password\": \"novasenha123\",\n  \"administrador\": \"true\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "76e62b71-d081-44c2-b889-9d4274ee2279",
          "length": 28,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "158f879a-928e-4048-8ead-a849b54e7345",
          "scriptId": "c41f2ed5-5939-4a24-a08c-30d851d88a89",
          "execution": "557e5d5a-1771-4feb-a196-35cce6faf9ec"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "0e0bb731-f416-46d9-a1f4-79f18099b8d4",
          "timestamp": 1756255605545,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
          "name": "Listar Produtos",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "produtos"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "6dd45129-cd33-4bde-bc39-da2184e7496f",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData.produtos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                  "});",
                  "",
                  "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        const produto = jsonData.produtos[0];",
                  "        pm.expect(produto).to.have.property('nome');",
                  "        pm.expect(produto).to.have.property('preco');",
                  "        pm.expect(produto).to.have.property('descricao');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('_id');",
                  "        // Salva um ID de produto para testes",
                  "        pm.environment.set(\"existingProductId\", produto._id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Preços são números positivos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.preco).to.be.a('number');",
                  "            pm.expect(produto.preco).to.be.greaterThan(0);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Quantidades são números não negativos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.quantidade).to.be.a('number');",
                  "            pm.expect(produto.quantidade).to.be.at.least(0);",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "ac7f290b-c6f8-458b-929f-c3383466adb5",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b286b68d-8355-41db-9b29-808eef35b6db"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "2e54fe4c0fbcaa5311ea8a2bc79e04ba",
          "id": "76a1b08d-66e7-4713-a776-6421d1880091",
          "timestamp": 1756255605548,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
          "name": "Listar Produtos",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData.produtos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                  "});",
                  "",
                  "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        const produto = jsonData.produtos[0];",
                  "        pm.expect(produto).to.have.property('nome');",
                  "        pm.expect(produto).to.have.property('preco');",
                  "        pm.expect(produto).to.have.property('descricao');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('_id');",
                  "        // Salva um ID de produto para testes",
                  "        pm.environment.set(\"existingProductId\", produto._id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Preços são números positivos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.preco).to.be.a('number');",
                  "            pm.expect(produto.preco).to.be.greaterThan(0);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Quantidades são números não negativos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.quantidade).to.be.a('number');",
                  "            pm.expect(produto.quantidade).to.be.at.least(0);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ac7f290b-c6f8-458b-929f-c3383466adb5",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b286b68d-8355-41db-9b29-808eef35b6db",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "c015a532-4d71-40e6-a270-0d46a36744fc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "4b1ca190348853d3d684fee11b628145",
          "id": "3532bddd-a3b0-4391-93af-86e297d2d369",
          "timestamp": 1756255605549,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
          "name": "Listar Produtos",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData.produtos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                  "});",
                  "",
                  "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        const produto = jsonData.produtos[0];",
                  "        pm.expect(produto).to.have.property('nome');",
                  "        pm.expect(produto).to.have.property('preco');",
                  "        pm.expect(produto).to.have.property('descricao');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('_id');",
                  "        // Salva um ID de produto para testes",
                  "        pm.environment.set(\"existingProductId\", produto._id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Preços são números positivos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.preco).to.be.a('number');",
                  "            pm.expect(produto.preco).to.be.greaterThan(0);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Quantidades são números não negativos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.quantidade).to.be.a('number');",
                  "            pm.expect(produto.quantidade).to.be.at.least(0);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ac7f290b-c6f8-458b-929f-c3383466adb5",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b286b68d-8355-41db-9b29-808eef35b6db",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "c015a532-4d71-40e6-a270-0d46a36744fc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:9)",
          "checksum": "9d947f75e461975d0c240c368b08260b",
          "id": "539eaa29-4225-4257-952c-202c58df89a5",
          "timestamp": 1756255605549,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
          "name": "Listar Produtos",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData.produtos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                  "});",
                  "",
                  "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        const produto = jsonData.produtos[0];",
                  "        pm.expect(produto).to.have.property('nome');",
                  "        pm.expect(produto).to.have.property('preco');",
                  "        pm.expect(produto).to.have.property('descricao');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('_id');",
                  "        // Salva um ID de produto para testes",
                  "        pm.environment.set(\"existingProductId\", produto._id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Preços são números positivos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.preco).to.be.a('number');",
                  "            pm.expect(produto.preco).to.be.greaterThan(0);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Quantidades são números não negativos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.quantidade).to.be.a('number');",
                  "            pm.expect(produto.quantidade).to.be.at.least(0);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ac7f290b-c6f8-458b-929f-c3383466adb5",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b286b68d-8355-41db-9b29-808eef35b6db",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "c015a532-4d71-40e6-a270-0d46a36744fc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:9)",
          "checksum": "f788229d260e66c397b99799c31c84e9",
          "id": "3382a8c7-ff81-42ac-97a4-210630320a55",
          "timestamp": 1756255605549,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
          "name": "Listar Produtos",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData.produtos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                  "});",
                  "",
                  "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        const produto = jsonData.produtos[0];",
                  "        pm.expect(produto).to.have.property('nome');",
                  "        pm.expect(produto).to.have.property('preco');",
                  "        pm.expect(produto).to.have.property('descricao');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('_id');",
                  "        // Salva um ID de produto para testes",
                  "        pm.environment.set(\"existingProductId\", produto._id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Preços são números positivos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.preco).to.be.a('number');",
                  "            pm.expect(produto.preco).to.be.greaterThan(0);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Quantidades são números não negativos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.quantidade).to.be.a('number');",
                  "            pm.expect(produto.quantidade).to.be.at.least(0);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ac7f290b-c6f8-458b-929f-c3383466adb5",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b286b68d-8355-41db-9b29-808eef35b6db",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "c015a532-4d71-40e6-a270-0d46a36744fc"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "13e4080bc0cc2d9286f2143b8db51825",
          "id": "3263271b-66a6-420f-acab-879dcd1e96ef",
          "timestamp": 1756255605552,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
          "name": "Listar Produtos",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData.produtos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                  "});",
                  "",
                  "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        const produto = jsonData.produtos[0];",
                  "        pm.expect(produto).to.have.property('nome');",
                  "        pm.expect(produto).to.have.property('preco');",
                  "        pm.expect(produto).to.have.property('descricao');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('_id');",
                  "        // Salva um ID de produto para testes",
                  "        pm.environment.set(\"existingProductId\", produto._id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Preços são números positivos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.preco).to.be.a('number');",
                  "            pm.expect(produto.preco).to.be.greaterThan(0);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Quantidades são números não negativos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.quantidade).to.be.a('number');",
                  "            pm.expect(produto.quantidade).to.be.at.least(0);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ac7f290b-c6f8-458b-929f-c3383466adb5",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b286b68d-8355-41db-9b29-808eef35b6db",
          "scriptId": "1036c6a0-15ce-4769-ab22-07812bbbd069",
          "execution": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response tem estrutura correta",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "ab7c298f5f3f632cdab9625136e9aed3",
          "id": "352a13f4-3ec5-4b92-9f11-095a10415b6e",
          "timestamp": 1756255605553,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
          "name": "Listar Produtos",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData.produtos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                  "});",
                  "",
                  "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        const produto = jsonData.produtos[0];",
                  "        pm.expect(produto).to.have.property('nome');",
                  "        pm.expect(produto).to.have.property('preco');",
                  "        pm.expect(produto).to.have.property('descricao');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('_id');",
                  "        // Salva um ID de produto para testes",
                  "        pm.environment.set(\"existingProductId\", produto._id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Preços são números positivos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.preco).to.be.a('number');",
                  "            pm.expect(produto.preco).to.be.greaterThan(0);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Quantidades são números não negativos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.quantidade).to.be.a('number');",
                  "            pm.expect(produto.quantidade).to.be.at.least(0);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ac7f290b-c6f8-458b-929f-c3383466adb5",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b286b68d-8355-41db-9b29-808eef35b6db",
          "scriptId": "1036c6a0-15ce-4769-ab22-07812bbbd069",
          "execution": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Quantidade corresponde ao array",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:9)",
          "checksum": "3f9f0dfbad74b652dfcb9f4a7650a4cc",
          "id": "f41b48d3-e9d7-493a-a9b0-733d270b43a7",
          "timestamp": 1756255605553,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
          "name": "Listar Produtos",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData.produtos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                  "});",
                  "",
                  "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        const produto = jsonData.produtos[0];",
                  "        pm.expect(produto).to.have.property('nome');",
                  "        pm.expect(produto).to.have.property('preco');",
                  "        pm.expect(produto).to.have.property('descricao');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('_id');",
                  "        // Salva um ID de produto para testes",
                  "        pm.environment.set(\"existingProductId\", produto._id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Preços são números positivos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.preco).to.be.a('number');",
                  "            pm.expect(produto.preco).to.be.greaterThan(0);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Quantidades são números não negativos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.quantidade).to.be.a('number');",
                  "            pm.expect(produto.quantidade).to.be.at.least(0);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ac7f290b-c6f8-458b-929f-c3383466adb5",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b286b68d-8355-41db-9b29-808eef35b6db",
          "scriptId": "1036c6a0-15ce-4769-ab22-07812bbbd069",
          "execution": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Produtos têm propriedades obrigatórias",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:9)",
          "checksum": "5ccf84823f5c865bd2329f55512b7b99",
          "id": "310d5077-0ab5-47ec-a4f4-809beade77ad",
          "timestamp": 1756255605553,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
          "name": "Listar Produtos",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData.produtos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                  "});",
                  "",
                  "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        const produto = jsonData.produtos[0];",
                  "        pm.expect(produto).to.have.property('nome');",
                  "        pm.expect(produto).to.have.property('preco');",
                  "        pm.expect(produto).to.have.property('descricao');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('_id');",
                  "        // Salva um ID de produto para testes",
                  "        pm.environment.set(\"existingProductId\", produto._id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Preços são números positivos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.preco).to.be.a('number');",
                  "            pm.expect(produto.preco).to.be.greaterThan(0);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Quantidades são números não negativos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.quantidade).to.be.a('number');",
                  "            pm.expect(produto.quantidade).to.be.at.least(0);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ac7f290b-c6f8-458b-929f-c3383466adb5",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b286b68d-8355-41db-9b29-808eef35b6db",
          "scriptId": "1036c6a0-15ce-4769-ab22-07812bbbd069",
          "execution": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 4,
          "test": "Preços são números positivos",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:9)",
          "checksum": "4a9030b1aea5161d6a6df11b0471548d",
          "id": "3bbbcb60-8d29-42fa-b4d3-99ddcbf8cdf3",
          "timestamp": 1756255605554,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
          "name": "Listar Produtos",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData.produtos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                  "});",
                  "",
                  "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        const produto = jsonData.produtos[0];",
                  "        pm.expect(produto).to.have.property('nome');",
                  "        pm.expect(produto).to.have.property('preco');",
                  "        pm.expect(produto).to.have.property('descricao');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('_id');",
                  "        // Salva um ID de produto para testes",
                  "        pm.environment.set(\"existingProductId\", produto._id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Preços são números positivos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.preco).to.be.a('number');",
                  "            pm.expect(produto.preco).to.be.greaterThan(0);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Quantidades são números não negativos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.quantidade).to.be.a('number');",
                  "            pm.expect(produto.quantidade).to.be.at.least(0);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ac7f290b-c6f8-458b-929f-c3383466adb5",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b286b68d-8355-41db-9b29-808eef35b6db",
          "scriptId": "1036c6a0-15ce-4769-ab22-07812bbbd069",
          "execution": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 5,
          "test": "Quantidades são números não negativos",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:6:9)",
          "checksum": "ec434bed9b5fd98681dbd135a1f8de9b",
          "id": "79d4f661-79eb-4e95-8a8c-2f50a2e27d75",
          "timestamp": 1756255605554,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
          "name": "Listar Produtos",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData.produtos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                  "});",
                  "",
                  "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        const produto = jsonData.produtos[0];",
                  "        pm.expect(produto).to.have.property('nome');",
                  "        pm.expect(produto).to.have.property('preco');",
                  "        pm.expect(produto).to.have.property('descricao');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('_id');",
                  "        // Salva um ID de produto para testes",
                  "        pm.environment.set(\"existingProductId\", produto._id);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Preços são números positivos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.preco).to.be.a('number');",
                  "            pm.expect(produto.preco).to.be.greaterThan(0);",
                  "        });",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Quantidades são números não negativos\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.produtos.length > 0) {",
                  "        jsonData.produtos.forEach(produto => {",
                  "            pm.expect(produto.quantidade).to.be.a('number');",
                  "            pm.expect(produto.quantidade).to.be.at.least(0);",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ac7f290b-c6f8-458b-929f-c3383466adb5",
          "length": 28,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b286b68d-8355-41db-9b29-808eef35b6db",
          "scriptId": "1036c6a0-15ce-4769-ab22-07812bbbd069",
          "execution": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Token não encontrado",
          "message": "Execute o login primeiro para obter o token",
          "stack": "AssertionError: Execute o login primeiro para obter o token\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "1f4930b85ccfd96c8d12be2202baefdd",
          "id": "56f22c72-b0a3-4b4c-8410-ce6176e9816a",
          "timestamp": 1756255605563,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
          "name": "Cadastrar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token de autorização",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Gera nome único para o produto",
                  "const timestamp = Date.now();",
                  "const productName = `Produto Teste ${timestamp}`;",
                  "pm.environment.set(\"uniqueProductName\", productName);"
                ],
                "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do produto é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"productId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fd2994f6-9599-4bf4-bd21-167610a1ef24",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "scriptId": "479479e5-e7b4-4d89-8a90-86938ee6650a",
          "execution": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "329119b4-3327-4c7d-b641-8a5a376b9bf5",
          "timestamp": 1756255605571,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
          "name": "Cadastrar Produto - Sucesso",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "produtos"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8204b183-fce0-484c-b204-adb046d2f205",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Teste 1756255605563\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token de autorização",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Gera nome único para o produto",
                  "const timestamp = Date.now();",
                  "const productName = `Produto Teste ${timestamp}`;",
                  "pm.environment.set(\"uniqueProductName\", productName);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do produto é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"productId\", jsonData._id);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "fd2994f6-9599-4bf4-bd21-167610a1ef24",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5803fed2-f183-4b3f-9db2-d73a196530b5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "03b9a23a19e2be327c5239e03ac4dc8c",
          "id": "4ba92baa-2625-4d6f-af16-0df3c75187d0",
          "timestamp": 1756255605575,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
          "name": "Cadastrar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token de autorização",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Gera nome único para o produto",
                  "const timestamp = Date.now();",
                  "const productName = `Produto Teste ${timestamp}`;",
                  "pm.environment.set(\"uniqueProductName\", productName);"
                ],
                "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do produto é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"productId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fd2994f6-9599-4bf4-bd21-167610a1ef24",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5803fed2-f183-4b3f-9db2-d73a196530b5",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "adc28eab-5b11-442d-b22f-26ae3279c4a4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "f5d324ba86e0f8a6e2c0e55ffac81602",
          "id": "e2d29e28-8396-4249-8333-1831bd8d270b",
          "timestamp": 1756255605576,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
          "name": "Cadastrar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token de autorização",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Gera nome único para o produto",
                  "const timestamp = Date.now();",
                  "const productName = `Produto Teste ${timestamp}`;",
                  "pm.environment.set(\"uniqueProductName\", productName);"
                ],
                "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do produto é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"productId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fd2994f6-9599-4bf4-bd21-167610a1ef24",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5803fed2-f183-4b3f-9db2-d73a196530b5",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "adc28eab-5b11-442d-b22f-26ae3279c4a4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:10)",
          "checksum": "46b493c3b7db46d08cc6dc6d629f342a",
          "id": "99ef54f4-1641-46c5-bc63-968d3793fdd9",
          "timestamp": 1756255605576,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
          "name": "Cadastrar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token de autorização",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Gera nome único para o produto",
                  "const timestamp = Date.now();",
                  "const productName = `Produto Teste ${timestamp}`;",
                  "pm.environment.set(\"uniqueProductName\", productName);"
                ],
                "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do produto é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"productId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fd2994f6-9599-4bf4-bd21-167610a1ef24",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5803fed2-f183-4b3f-9db2-d73a196530b5",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "adc28eab-5b11-442d-b22f-26ae3279c4a4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:10)",
          "checksum": "10fe75f1cf484d0a37deaff8fa5d3d10",
          "id": "64a096b9-ff20-4581-bd60-fd54000f842c",
          "timestamp": 1756255605576,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
          "name": "Cadastrar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token de autorização",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Gera nome único para o produto",
                  "const timestamp = Date.now();",
                  "const productName = `Produto Teste ${timestamp}`;",
                  "pm.environment.set(\"uniqueProductName\", productName);"
                ],
                "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do produto é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"productId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fd2994f6-9599-4bf4-bd21-167610a1ef24",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5803fed2-f183-4b3f-9db2-d73a196530b5",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "adc28eab-5b11-442d-b22f-26ae3279c4a4"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 201",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "9d227c1a8c02bee1848b91b279df7215",
          "id": "a4705311-35c8-4d6d-af90-906ca11fbb35",
          "timestamp": 1756255605580,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
          "name": "Cadastrar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token de autorização",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Gera nome único para o produto",
                  "const timestamp = Date.now();",
                  "const productName = `Produto Teste ${timestamp}`;",
                  "pm.environment.set(\"uniqueProductName\", productName);"
                ],
                "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do produto é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"productId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fd2994f6-9599-4bf4-bd21-167610a1ef24",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5803fed2-f183-4b3f-9db2-d73a196530b5",
          "scriptId": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
          "execution": "fa754de9-399b-409b-abb5-add95004a334"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response tem propriedades obrigatórias",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "2fa8ed6f0bedc07477928870ac564211",
          "id": "caa87bdf-bb14-4de3-bfbd-d3958da2e4e3",
          "timestamp": 1756255605581,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
          "name": "Cadastrar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token de autorização",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Gera nome único para o produto",
                  "const timestamp = Date.now();",
                  "const productName = `Produto Teste ${timestamp}`;",
                  "pm.environment.set(\"uniqueProductName\", productName);"
                ],
                "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do produto é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"productId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fd2994f6-9599-4bf4-bd21-167610a1ef24",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5803fed2-f183-4b3f-9db2-d73a196530b5",
          "scriptId": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
          "execution": "fa754de9-399b-409b-abb5-add95004a334"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Message de sucesso",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:10)",
          "checksum": "60cfc0578ef1ae80ec1ec76b87cc0efc",
          "id": "4b82a49c-5f08-4e56-a01c-8e2247bc2154",
          "timestamp": 1756255605581,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
          "name": "Cadastrar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token de autorização",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Gera nome único para o produto",
                  "const timestamp = Date.now();",
                  "const productName = `Produto Teste ${timestamp}`;",
                  "pm.environment.set(\"uniqueProductName\", productName);"
                ],
                "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do produto é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"productId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fd2994f6-9599-4bf4-bd21-167610a1ef24",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5803fed2-f183-4b3f-9db2-d73a196530b5",
          "scriptId": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
          "execution": "fa754de9-399b-409b-abb5-add95004a334"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "ID do produto é válido",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:10)",
          "checksum": "3d699a3b4214c54605c2b4e39e4f3ad5",
          "id": "5a322e13-454f-4a4c-886b-45c96e977595",
          "timestamp": 1756255605581,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
          "name": "Cadastrar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token de autorização",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Gera nome único para o produto",
                  "const timestamp = Date.now();",
                  "const productName = `Produto Teste ${timestamp}`;",
                  "pm.environment.set(\"uniqueProductName\", productName);"
                ],
                "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do produto é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"productId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "fd2994f6-9599-4bf4-bd21-167610a1ef24",
          "length": 28,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5803fed2-f183-4b3f-9db2-d73a196530b5",
          "scriptId": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
          "execution": "fa754de9-399b-409b-abb5-add95004a334"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "b2fee7d4-082c-496f-a84d-5b03d4fd8306",
          "timestamp": 1756255605593,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
          "name": "Cadastrar Produto - Sem Token",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "produtos"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "24885e9b-fab8-4aa2-8a66-8a2bf85dfd15",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "9667a467-2615-41b0-bce3-c1e2b70f04f2",
          "length": 28,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "feb3f871-4ef3-42de-a391-5e1810091978"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "8fe13b17f3794dd356fae856ae682c4f",
          "id": "18926bd1-f13f-4d0c-a1df-39d700f32b6d",
          "timestamp": 1756255605597,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
          "name": "Cadastrar Produto - Sem Token",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9667a467-2615-41b0-bce3-c1e2b70f04f2",
          "length": 28,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "feb3f871-4ef3-42de-a391-5e1810091978",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "68325a3e-670e-4dca-8a9d-a943c68222a8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "921f2b81ea0864e4cea2402a7d823032",
          "id": "37dc1287-66be-4197-94ff-78926d97ae2f",
          "timestamp": 1756255605597,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
          "name": "Cadastrar Produto - Sem Token",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9667a467-2615-41b0-bce3-c1e2b70f04f2",
          "length": 28,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "feb3f871-4ef3-42de-a391-5e1810091978",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "68325a3e-670e-4dca-8a9d-a943c68222a8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:11)",
          "checksum": "7a3523a4abc9199f35c7fb715d7318c2",
          "id": "afbbad78-9279-4135-a7da-d92c0b5bfad7",
          "timestamp": 1756255605598,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
          "name": "Cadastrar Produto - Sem Token",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9667a467-2615-41b0-bce3-c1e2b70f04f2",
          "length": 28,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "feb3f871-4ef3-42de-a391-5e1810091978",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "68325a3e-670e-4dca-8a9d-a943c68222a8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:11)",
          "checksum": "772aa8b62b5c7ab1df0dd4a86f44cb13",
          "id": "3d4a017d-1edd-48a1-b1d4-0497bdf1ecea",
          "timestamp": 1756255605598,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
          "name": "Cadastrar Produto - Sem Token",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9667a467-2615-41b0-bce3-c1e2b70f04f2",
          "length": 28,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "feb3f871-4ef3-42de-a391-5e1810091978",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "68325a3e-670e-4dca-8a9d-a943c68222a8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 401",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "505cef4bc04c82f9f1d73dbf23229288",
          "id": "499a0c90-ae57-408d-bc70-c677065c7459",
          "timestamp": 1756255605601,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
          "name": "Cadastrar Produto - Sem Token",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9667a467-2615-41b0-bce3-c1e2b70f04f2",
          "length": 28,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "feb3f871-4ef3-42de-a391-5e1810091978",
          "scriptId": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
          "execution": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de erro de token",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "4baf7c9b4c0dc1db8eb5b8b7e9ceff41",
          "id": "8a49730c-77fb-43d2-b30b-704479850136",
          "timestamp": 1756255605602,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
          "name": "Cadastrar Produto - Sem Token",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9667a467-2615-41b0-bce3-c1e2b70f04f2",
          "length": 28,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "feb3f871-4ef3-42de-a391-5e1810091978",
          "scriptId": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
          "execution": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "bf10a556-0015-472e-a11f-00dcffa297f3",
          "timestamp": 1756255605612,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c846f035-5523-48eb-adbe-8e616d058605",
          "name": "Cadastrar Produto - Nome Duplicado",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "produtos"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "988ddf88-7806-4629-a842-77ac3aa90960",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Teste 1756255605563\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de nome duplicado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "77ba241d-242f-410c-bfcc-913bd58be9c6",
          "length": 28,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1361984b-cc03-43f7-9a8b-319b0347b223"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "8d767cc383d994ed631bf3993fb77550",
          "id": "f1d2bf2f-c6c8-4afd-b74a-75780a69e830",
          "timestamp": 1756255605616,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c846f035-5523-48eb-adbe-8e616d058605",
          "name": "Cadastrar Produto - Nome Duplicado",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de nome duplicado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                  "});"
                ],
                "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77ba241d-242f-410c-bfcc-913bd58be9c6",
          "length": 28,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1361984b-cc03-43f7-9a8b-319b0347b223",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "857f57c5-aef4-4b36-a906-8b33b644f1de"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "3426c2c3a227ded7e9e8e3d6b0eaeeec",
          "id": "5476d841-d875-4693-bc95-3cc4ad8f5229",
          "timestamp": 1756255605616,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c846f035-5523-48eb-adbe-8e616d058605",
          "name": "Cadastrar Produto - Nome Duplicado",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de nome duplicado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                  "});"
                ],
                "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77ba241d-242f-410c-bfcc-913bd58be9c6",
          "length": 28,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1361984b-cc03-43f7-9a8b-319b0347b223",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "857f57c5-aef4-4b36-a906-8b33b644f1de"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:12)",
          "checksum": "045c46be3bf3c6830fa61910e8432812",
          "id": "2ee8f797-4c7c-4210-aa99-47a3f458d57a",
          "timestamp": 1756255605617,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "c846f035-5523-48eb-adbe-8e616d058605",
          "name": "Cadastrar Produto - Nome Duplicado",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de nome duplicado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                  "});"
                ],
                "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77ba241d-242f-410c-bfcc-913bd58be9c6",
          "length": 28,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1361984b-cc03-43f7-9a8b-319b0347b223",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "857f57c5-aef4-4b36-a906-8b33b644f1de"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:12)",
          "checksum": "49a79b37fe1df3aad64a13db269010f0",
          "id": "0b4a37d4-b1f1-4bdf-a957-a4d0c9f33218",
          "timestamp": 1756255605617,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "c846f035-5523-48eb-adbe-8e616d058605",
          "name": "Cadastrar Produto - Nome Duplicado",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de nome duplicado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                  "});"
                ],
                "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77ba241d-242f-410c-bfcc-913bd58be9c6",
          "length": 28,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1361984b-cc03-43f7-9a8b-319b0347b223",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "857f57c5-aef4-4b36-a906-8b33b644f1de"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "3d964c5a091166c927025d08779f4fe9",
          "id": "f3defbd7-596d-4ac0-8dde-d95968537f19",
          "timestamp": 1756255605621,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c846f035-5523-48eb-adbe-8e616d058605",
          "name": "Cadastrar Produto - Nome Duplicado",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de nome duplicado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                  "});"
                ],
                "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77ba241d-242f-410c-bfcc-913bd58be9c6",
          "length": 28,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1361984b-cc03-43f7-9a8b-319b0347b223",
          "scriptId": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
          "execution": "42808f4b-1090-4259-87a9-7872eac722ac"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de erro de nome duplicado",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:12)",
          "checksum": "585bfcb0e803e665adc96e3a0b90d1bb",
          "id": "9c0979dd-d6e7-41d1-8c8e-8d850c97702f",
          "timestamp": 1756255605621,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c846f035-5523-48eb-adbe-8e616d058605",
          "name": "Cadastrar Produto - Nome Duplicado",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de nome duplicado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                  "});"
                ],
                "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77ba241d-242f-410c-bfcc-913bd58be9c6",
          "length": 28,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1361984b-cc03-43f7-9a8b-319b0347b223",
          "scriptId": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
          "execution": "42808f4b-1090-4259-87a9-7872eac722ac"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "19bebaab-b524-4db8-94be-93118ecd7230",
          "timestamp": 1756255605633,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4485a041-1636-4e34-9740-a4083967334f",
          "name": "Buscar Produto por ID - Sucesso",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "produtos",
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "3da63e3b-3fd4-4328-b44e-7d2fe22722b0",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "    pm.expect(jsonData).to.have.property('descricao');",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"productId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "c2581b78-0d6e-439c-bb5d-f9e3958a8913",
          "length": 28,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2ecadca2-2a6a-4496-aa6e-324cc7983127"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "e908ae8e8dc996b940966c1d83b70ada",
          "id": "63ddf0a0-a79a-4a07-9dd4-1ddc9e476813",
          "timestamp": 1756255605636,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4485a041-1636-4e34-9740-a4083967334f",
          "name": "Buscar Produto por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "    pm.expect(jsonData).to.have.property('descricao');",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"productId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2581b78-0d6e-439c-bb5d-f9e3958a8913",
          "length": 28,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2ecadca2-2a6a-4496-aa6e-324cc7983127",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "84a70f0a-a446-4835-86e4-826a4482126f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "6e72dae294e75fbbf54d5e79c543182a",
          "id": "3fc4b892-9235-423e-900e-c08a9d2006e1",
          "timestamp": 1756255605637,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4485a041-1636-4e34-9740-a4083967334f",
          "name": "Buscar Produto por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "    pm.expect(jsonData).to.have.property('descricao');",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"productId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2581b78-0d6e-439c-bb5d-f9e3958a8913",
          "length": 28,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2ecadca2-2a6a-4496-aa6e-324cc7983127",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "84a70f0a-a446-4835-86e4-826a4482126f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:13)",
          "checksum": "62157149b0220678c4458483cd47746c",
          "id": "79b73453-5b12-468b-8828-5772599dd5d5",
          "timestamp": 1756255605637,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "4485a041-1636-4e34-9740-a4083967334f",
          "name": "Buscar Produto por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "    pm.expect(jsonData).to.have.property('descricao');",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"productId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2581b78-0d6e-439c-bb5d-f9e3958a8913",
          "length": 28,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2ecadca2-2a6a-4496-aa6e-324cc7983127",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "84a70f0a-a446-4835-86e4-826a4482126f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:13)",
          "checksum": "240389e7a6b68a3da03d70b2b2174262",
          "id": "8beffb5b-2321-407e-9b62-4c3be8cfe881",
          "timestamp": 1756255605637,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "4485a041-1636-4e34-9740-a4083967334f",
          "name": "Buscar Produto por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "    pm.expect(jsonData).to.have.property('descricao');",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"productId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2581b78-0d6e-439c-bb5d-f9e3958a8913",
          "length": 28,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2ecadca2-2a6a-4496-aa6e-324cc7983127",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "84a70f0a-a446-4835-86e4-826a4482126f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "c6ad7ee38c9c746e4a0e81bc9d47dbd6",
          "id": "f543d1db-d4bc-4aaf-936a-f7c980dea09a",
          "timestamp": 1756255605640,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4485a041-1636-4e34-9740-a4083967334f",
          "name": "Buscar Produto por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "    pm.expect(jsonData).to.have.property('descricao');",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"productId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2581b78-0d6e-439c-bb5d-f9e3958a8913",
          "length": 28,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2ecadca2-2a6a-4496-aa6e-324cc7983127",
          "scriptId": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
          "execution": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response tem propriedades obrigatórias",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:13)",
          "checksum": "f3edd463d2c2e9597866c564a412402c",
          "id": "08f7864c-235a-4b39-b8b1-b602c5c471a8",
          "timestamp": 1756255605641,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4485a041-1636-4e34-9740-a4083967334f",
          "name": "Buscar Produto por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "    pm.expect(jsonData).to.have.property('descricao');",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"productId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2581b78-0d6e-439c-bb5d-f9e3958a8913",
          "length": 28,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2ecadca2-2a6a-4496-aa6e-324cc7983127",
          "scriptId": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
          "execution": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "ID do produto corresponde ao solicitado",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:13)",
          "checksum": "8ba5ea12bbf708f2fa8daa490ef2d9da",
          "id": "32f7e949-096e-444c-be4e-ee7c0e6dec2c",
          "timestamp": 1756255605641,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "4485a041-1636-4e34-9740-a4083967334f",
          "name": "Buscar Produto por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "    pm.expect(jsonData).to.have.property('descricao');",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"productId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c2581b78-0d6e-439c-bb5d-f9e3958a8913",
          "length": 28,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2ecadca2-2a6a-4496-aa6e-324cc7983127",
          "scriptId": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
          "execution": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "46487d55-8966-442e-b3c3-7481547c21f7",
          "timestamp": 1756255605652,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
          "name": "Buscar Produto por ID - Não Encontrado",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "produtos",
                "idProdutoInexistente123"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "24793bdc-07b3-4aaa-89f9-afd5208d3978",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "d0676918-934b-4dd8-8664-3265e69d1bd4",
          "length": 28,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fdbc83b7-3d23-47de-a582-acf903ecf530"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "cd02026a6050d0a6888d8965b149ab19",
          "id": "d420e862-fc9f-471d-9c6d-ef04cafe2560",
          "timestamp": 1756255605656,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
          "name": "Buscar Produto por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "produtos",
                "idProdutoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d0676918-934b-4dd8-8664-3265e69d1bd4",
          "length": 28,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fdbc83b7-3d23-47de-a582-acf903ecf530",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "596b32eb-ded5-43ec-96d1-4db0571da166"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "924764f7838ca55e92520ae74a86d641",
          "id": "8515c332-7ec5-4f10-b44d-b96eddaf107c",
          "timestamp": 1756255605656,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
          "name": "Buscar Produto por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "produtos",
                "idProdutoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d0676918-934b-4dd8-8664-3265e69d1bd4",
          "length": 28,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fdbc83b7-3d23-47de-a582-acf903ecf530",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "596b32eb-ded5-43ec-96d1-4db0571da166"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:14)",
          "checksum": "772eb654da16e336724d2dd84d12dac2",
          "id": "eb6fbd04-b82f-406e-a8cb-32633ffd7133",
          "timestamp": 1756255605656,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
          "name": "Buscar Produto por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "produtos",
                "idProdutoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d0676918-934b-4dd8-8664-3265e69d1bd4",
          "length": 28,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fdbc83b7-3d23-47de-a582-acf903ecf530",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "596b32eb-ded5-43ec-96d1-4db0571da166"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:14)",
          "checksum": "22ac13f4a6b5cbd65ae729472b50ff71",
          "id": "81ffd199-62d7-48c5-99ad-8edb62435fed",
          "timestamp": 1756255605657,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
          "name": "Buscar Produto por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "produtos",
                "idProdutoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d0676918-934b-4dd8-8664-3265e69d1bd4",
          "length": 28,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fdbc83b7-3d23-47de-a582-acf903ecf530",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "596b32eb-ded5-43ec-96d1-4db0571da166"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "2edce7aa1b80f3cdc41a34f0b8033e91",
          "id": "b0234371-2640-48cc-a513-8e55882002aa",
          "timestamp": 1756255605660,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
          "name": "Buscar Produto por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "produtos",
                "idProdutoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d0676918-934b-4dd8-8664-3265e69d1bd4",
          "length": 28,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fdbc83b7-3d23-47de-a582-acf903ecf530",
          "scriptId": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
          "execution": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de erro correto",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:14)",
          "checksum": "39584b1b8c510dafce7188f8b5662f20",
          "id": "4e7d6de8-c524-4930-aa80-427a0cd5c55f",
          "timestamp": 1756255605661,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
          "name": "Buscar Produto por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "produtos",
                "idProdutoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d0676918-934b-4dd8-8664-3265e69d1bd4",
          "length": 28,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fdbc83b7-3d23-47de-a582-acf903ecf530",
          "scriptId": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
          "execution": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "5f53810f-fa04-455f-a5a1-047ce146f5e6",
          "timestamp": 1756255605673,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
          "name": "Editar Produto - Sucesso",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "produtos",
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "bb0f1a63-462c-4b0c-b3fa-2e43e9a36cd1",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Teste 1756255605563 - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "080f9aa5-9587-4643-b3c6-6467a886824c",
          "length": 28,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "58fbc5d6-aacf-45c0-8075-f93ad66db673"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "4311e511ea35e70b98bd294e296e4042",
          "id": "bae0a753-b8e1-48da-a70c-5b319bf99365",
          "timestamp": 1756255605675,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
          "name": "Editar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "080f9aa5-9587-4643-b3c6-6467a886824c",
          "length": 28,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "58fbc5d6-aacf-45c0-8075-f93ad66db673",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "894a4ebc-3b89-4a0c-87f3-76da1fe03df2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "8838ea181d918bd7d130472f59f53641",
          "id": "a40ee59b-3b04-4ca4-88d4-cd17c2dc9bf1",
          "timestamp": 1756255605675,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
          "name": "Editar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "080f9aa5-9587-4643-b3c6-6467a886824c",
          "length": 28,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "58fbc5d6-aacf-45c0-8075-f93ad66db673",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "894a4ebc-3b89-4a0c-87f3-76da1fe03df2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:15)",
          "checksum": "5710f61be377220f04147414b99fc54e",
          "id": "291dab23-0f96-4a08-a4f2-1048839c9ceb",
          "timestamp": 1756255605676,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
          "name": "Editar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "080f9aa5-9587-4643-b3c6-6467a886824c",
          "length": 28,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "58fbc5d6-aacf-45c0-8075-f93ad66db673",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "894a4ebc-3b89-4a0c-87f3-76da1fe03df2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:15)",
          "checksum": "b9324253240ad2f37a6bc1339fcdd0dc",
          "id": "4158340a-fb77-40df-8425-9c67001aa014",
          "timestamp": 1756255605676,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
          "name": "Editar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "080f9aa5-9587-4643-b3c6-6467a886824c",
          "length": 28,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "58fbc5d6-aacf-45c0-8075-f93ad66db673",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "894a4ebc-3b89-4a0c-87f3-76da1fe03df2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "f798e61b346f06e320714b6530a38ad3",
          "id": "333603ef-4eaf-4e8d-9647-d99827bf2ca4",
          "timestamp": 1756255605680,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
          "name": "Editar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "080f9aa5-9587-4643-b3c6-6467a886824c",
          "length": 28,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "58fbc5d6-aacf-45c0-8075-f93ad66db673",
          "scriptId": "cde1edbc-7efa-483f-b470-1c333be31bba",
          "execution": "e0d24993-5bad-45e1-9917-c04371f2e733"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de sucesso",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:15)",
          "checksum": "e0257c0e5bc66a3df5d28c8c5848ecbe",
          "id": "77927bb0-5d23-4708-93ce-42c00c8883a2",
          "timestamp": 1756255605681,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
          "name": "Editar Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                  "});"
                ],
                "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
              }
            }
          ]
        },
        "parent": {
          "id": "ebab0d6d-8868-4d0b-a57f-8dac06772dd6",
          "name": "3. Produtos",
          "item": [
            {
              "id": "1f5aa14a-838c-445a-b29c-edb81ee21ad8",
              "name": "Listar Produtos",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1036c6a0-15ce-4769-ab22-07812bbbd069",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData.produtos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.produtos.length);",
                      "});",
                      "",
                      "pm.test(\"Produtos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        const produto = jsonData.produtos[0];",
                      "        pm.expect(produto).to.have.property('nome');",
                      "        pm.expect(produto).to.have.property('preco');",
                      "        pm.expect(produto).to.have.property('descricao');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('_id');",
                      "        // Salva um ID de produto para testes",
                      "        pm.environment.set(\"existingProductId\", produto._id);",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Preços são números positivos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.preco).to.be.a('number');",
                      "            pm.expect(produto.preco).to.be.greaterThan(0);",
                      "        });",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Quantidades são números não negativos\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.produtos.length > 0) {",
                      "        jsonData.produtos.forEach(produto => {",
                      "            pm.expect(produto.quantidade).to.be.a('number');",
                      "            pm.expect(produto.quantidade).to.be.at.least(0);",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "224ab947-5cc5-46ac-9dd2-323c71757e1b"
                  }
                }
              ]
            },
            {
              "id": "1c6095b3-ab25-4488-a635-bb303fa65153",
              "name": "Cadastrar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 250,\n  \"descricao\": \"Produto para testes automatizados\",\n  \"quantidade\": 100\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "479479e5-e7b4-4d89-8a90-86938ee6650a",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token de autorização",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Gera nome único para o produto",
                      "const timestamp = Date.now();",
                      "const productName = `Produto Teste ${timestamp}`;",
                      "pm.environment.set(\"uniqueProductName\", productName);"
                    ],
                    "_lastExecutionId": "f0afd599-3a8e-4b16-84ae-57d608eabc2d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6201cd3b-fae2-4c48-9938-5592ad0626bd",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do produto é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"productId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "fa754de9-399b-409b-abb5-add95004a334"
                  }
                }
              ]
            },
            {
              "id": "7299a279-59d9-4605-bc37-3dcb0006fe07",
              "name": "Cadastrar Produto - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Sem Token\",\n  \"preco\": 150,\n  \"descricao\": \"Teste sem autorização\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5baecfc2-cde7-4593-9ade-ffe90d927f71",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "70b86b34-5212-45f3-b8f7-1decbba47c7e"
                  }
                }
              ]
            },
            {
              "id": "c846f035-5523-48eb-adbe-8e616d058605",
              "name": "Cadastrar Produto - Nome Duplicado",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}}\",\n  \"preco\": 300,\n  \"descricao\": \"Tentativa de duplicar nome\",\n  \"quantidade\": 75\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c3f3af8e-ebcf-49c2-aef4-f71b56b6795a",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de nome duplicado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Já existe produto com esse nome\");",
                      "});"
                    ],
                    "_lastExecutionId": "42808f4b-1090-4259-87a9-7872eac722ac"
                  }
                }
              ]
            },
            {
              "id": "4485a041-1636-4e34-9740-a4083967334f",
              "name": "Buscar Produto por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6ed2998-6edf-4f58-a9f7-7107700b8423",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "    pm.expect(jsonData).to.have.property('descricao');",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do produto corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"productId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "1102e8db-2ffc-4005-96b3-45b9d1ce5978"
                  }
                }
              ]
            },
            {
              "id": "9d5692ad-0ec2-4cd1-8a74-c3150ff29152",
              "name": "Buscar Produto por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "idProdutoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "82f40d9d-4871-45ad-83d2-3c7e9bad8955",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "d18418ae-f25c-4f5d-89df-d8e14ee8739c"
                  }
                }
              ]
            },
            {
              "id": "bad85080-92e0-4023-9dc4-4279be5dd6e0",
              "name": "Editar Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"{{uniqueProductName}} - Editado\",\n  \"preco\": 350,\n  \"descricao\": \"Produto editado via testes automatizados\",\n  \"quantidade\": 150\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cde1edbc-7efa-483f-b470-1c333be31bba",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Registro alterado com sucesso\");",
                      "});"
                    ],
                    "_lastExecutionId": "e0d24993-5bad-45e1-9917-c04371f2e733"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "080f9aa5-9587-4643-b3c6-6467a886824c",
          "length": 28,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "58fbc5d6-aacf-45c0-8075-f93ad66db673",
          "scriptId": "cde1edbc-7efa-483f-b470-1c333be31bba",
          "execution": "e0d24993-5bad-45e1-9917-c04371f2e733"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "47c31dc7-1a54-4841-8475-e5df5c3e4f19",
          "timestamp": 1756255605692,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
          "name": "Listar Carrinhos",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "carrinhos"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "940757bf-b101-45de-a22f-d098aff00241",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('carrinhos');",
                  "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                  "});",
                  "",
                  "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0) {",
                  "        const carrinho = jsonData.carrinhos[0];",
                  "        pm.expect(carrinho).to.have.property('produtos');",
                  "        pm.expect(carrinho).to.have.property('precoTotal');",
                  "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                  "        pm.expect(carrinho).to.have.property('idUsuario');",
                  "        pm.expect(carrinho).to.have.property('_id');",
                  "        pm.expect(carrinho.produtos).to.be.an('array');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                  "        const produto = jsonData.carrinhos[0].produtos[0];",
                  "        pm.expect(produto).to.have.property('idProduto');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('precoUnitario');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "f442f897-b0bd-4b6b-a34d-6a95d7ce00ac",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fae9f86-5468-4113-b7ea-c0b70f8552e9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "c0ff89d9862ffca442e5c600a1269cbb",
          "id": "17c3b7bc-5b1e-49ad-bd3e-ab0a0ee83d6d",
          "timestamp": 1756255605695,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
          "name": "Listar Carrinhos",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('carrinhos');",
                  "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                  "});",
                  "",
                  "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0) {",
                  "        const carrinho = jsonData.carrinhos[0];",
                  "        pm.expect(carrinho).to.have.property('produtos');",
                  "        pm.expect(carrinho).to.have.property('precoTotal');",
                  "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                  "        pm.expect(carrinho).to.have.property('idUsuario');",
                  "        pm.expect(carrinho).to.have.property('_id');",
                  "        pm.expect(carrinho.produtos).to.be.an('array');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                  "        const produto = jsonData.carrinhos[0].produtos[0];",
                  "        pm.expect(produto).to.have.property('idProduto');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('precoUnitario');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f442f897-b0bd-4b6b-a34d-6a95d7ce00ac",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fae9f86-5468-4113-b7ea-c0b70f8552e9",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "5eb7ef72-c55d-47e1-bc09-d6815e5594ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:16)",
          "checksum": "699b44450ddbef1f334ee89daccd44df",
          "id": "a8c5049e-32ab-4a24-8dac-4e9959aa7a44",
          "timestamp": 1756255605696,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
          "name": "Listar Carrinhos",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('carrinhos');",
                  "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                  "});",
                  "",
                  "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0) {",
                  "        const carrinho = jsonData.carrinhos[0];",
                  "        pm.expect(carrinho).to.have.property('produtos');",
                  "        pm.expect(carrinho).to.have.property('precoTotal');",
                  "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                  "        pm.expect(carrinho).to.have.property('idUsuario');",
                  "        pm.expect(carrinho).to.have.property('_id');",
                  "        pm.expect(carrinho.produtos).to.be.an('array');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                  "        const produto = jsonData.carrinhos[0].produtos[0];",
                  "        pm.expect(produto).to.have.property('idProduto');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('precoUnitario');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f442f897-b0bd-4b6b-a34d-6a95d7ce00ac",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fae9f86-5468-4113-b7ea-c0b70f8552e9",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "5eb7ef72-c55d-47e1-bc09-d6815e5594ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:16)",
          "checksum": "5e5f2a82414bf0a7b09a49cfeb545858",
          "id": "b07a6b36-60db-437e-b531-75477f1c565e",
          "timestamp": 1756255605696,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
          "name": "Listar Carrinhos",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('carrinhos');",
                  "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                  "});",
                  "",
                  "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0) {",
                  "        const carrinho = jsonData.carrinhos[0];",
                  "        pm.expect(carrinho).to.have.property('produtos');",
                  "        pm.expect(carrinho).to.have.property('precoTotal');",
                  "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                  "        pm.expect(carrinho).to.have.property('idUsuario');",
                  "        pm.expect(carrinho).to.have.property('_id');",
                  "        pm.expect(carrinho.produtos).to.be.an('array');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                  "        const produto = jsonData.carrinhos[0].produtos[0];",
                  "        pm.expect(produto).to.have.property('idProduto');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('precoUnitario');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f442f897-b0bd-4b6b-a34d-6a95d7ce00ac",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fae9f86-5468-4113-b7ea-c0b70f8552e9",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "5eb7ef72-c55d-47e1-bc09-d6815e5594ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:16)",
          "checksum": "3bd085415ae81467d4282ca92561fb48",
          "id": "b082f1ae-e5d3-4d1f-8675-b6e89ef9d56e",
          "timestamp": 1756255605696,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
          "name": "Listar Carrinhos",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('carrinhos');",
                  "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                  "});",
                  "",
                  "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0) {",
                  "        const carrinho = jsonData.carrinhos[0];",
                  "        pm.expect(carrinho).to.have.property('produtos');",
                  "        pm.expect(carrinho).to.have.property('precoTotal');",
                  "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                  "        pm.expect(carrinho).to.have.property('idUsuario');",
                  "        pm.expect(carrinho).to.have.property('_id');",
                  "        pm.expect(carrinho.produtos).to.be.an('array');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                  "        const produto = jsonData.carrinhos[0].produtos[0];",
                  "        pm.expect(produto).to.have.property('idProduto');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('precoUnitario');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f442f897-b0bd-4b6b-a34d-6a95d7ce00ac",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fae9f86-5468-4113-b7ea-c0b70f8552e9",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "5eb7ef72-c55d-47e1-bc09-d6815e5594ce"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "9692ee6657575dae61b153678d9be1bc",
          "id": "84340763-d3b5-4de6-9227-10ddfe04b7e6",
          "timestamp": 1756255605699,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
          "name": "Listar Carrinhos",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('carrinhos');",
                  "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                  "});",
                  "",
                  "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0) {",
                  "        const carrinho = jsonData.carrinhos[0];",
                  "        pm.expect(carrinho).to.have.property('produtos');",
                  "        pm.expect(carrinho).to.have.property('precoTotal');",
                  "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                  "        pm.expect(carrinho).to.have.property('idUsuario');",
                  "        pm.expect(carrinho).to.have.property('_id');",
                  "        pm.expect(carrinho.produtos).to.be.an('array');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                  "        const produto = jsonData.carrinhos[0].produtos[0];",
                  "        pm.expect(produto).to.have.property('idProduto');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('precoUnitario');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f442f897-b0bd-4b6b-a34d-6a95d7ce00ac",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fae9f86-5468-4113-b7ea-c0b70f8552e9",
          "scriptId": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
          "execution": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response tem estrutura correta",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:16)",
          "checksum": "9e5bbc59e609fb9856a664f8341d3797",
          "id": "56903437-d26d-4e4c-b532-e9292edd6bfd",
          "timestamp": 1756255605700,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
          "name": "Listar Carrinhos",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('carrinhos');",
                  "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                  "});",
                  "",
                  "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0) {",
                  "        const carrinho = jsonData.carrinhos[0];",
                  "        pm.expect(carrinho).to.have.property('produtos');",
                  "        pm.expect(carrinho).to.have.property('precoTotal');",
                  "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                  "        pm.expect(carrinho).to.have.property('idUsuario');",
                  "        pm.expect(carrinho).to.have.property('_id');",
                  "        pm.expect(carrinho.produtos).to.be.an('array');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                  "        const produto = jsonData.carrinhos[0].produtos[0];",
                  "        pm.expect(produto).to.have.property('idProduto');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('precoUnitario');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f442f897-b0bd-4b6b-a34d-6a95d7ce00ac",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fae9f86-5468-4113-b7ea-c0b70f8552e9",
          "scriptId": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
          "execution": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Quantidade corresponde ao array",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:16)",
          "checksum": "634f73ce5a72efc2de64f3bb6ad358c9",
          "id": "74c755c5-6697-4879-aa86-6275c2f658f1",
          "timestamp": 1756255605700,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
          "name": "Listar Carrinhos",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('carrinhos');",
                  "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                  "});",
                  "",
                  "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0) {",
                  "        const carrinho = jsonData.carrinhos[0];",
                  "        pm.expect(carrinho).to.have.property('produtos');",
                  "        pm.expect(carrinho).to.have.property('precoTotal');",
                  "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                  "        pm.expect(carrinho).to.have.property('idUsuario');",
                  "        pm.expect(carrinho).to.have.property('_id');",
                  "        pm.expect(carrinho.produtos).to.be.an('array');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                  "        const produto = jsonData.carrinhos[0].produtos[0];",
                  "        pm.expect(produto).to.have.property('idProduto');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('precoUnitario');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f442f897-b0bd-4b6b-a34d-6a95d7ce00ac",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fae9f86-5468-4113-b7ea-c0b70f8552e9",
          "scriptId": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
          "execution": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "Carrinhos têm propriedades obrigatórias",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:16)",
          "checksum": "d022f499b82e3bbaac259e9704ee0403",
          "id": "3ef0af9d-ba0e-469a-9a34-c9b1c88fb054",
          "timestamp": 1756255605700,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
          "name": "Listar Carrinhos",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('carrinhos');",
                  "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                  "});",
                  "",
                  "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0) {",
                  "        const carrinho = jsonData.carrinhos[0];",
                  "        pm.expect(carrinho).to.have.property('produtos');",
                  "        pm.expect(carrinho).to.have.property('precoTotal');",
                  "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                  "        pm.expect(carrinho).to.have.property('idUsuario');",
                  "        pm.expect(carrinho).to.have.property('_id');",
                  "        pm.expect(carrinho.produtos).to.be.an('array');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                  "        const produto = jsonData.carrinhos[0].produtos[0];",
                  "        pm.expect(produto).to.have.property('idProduto');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('precoUnitario');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f442f897-b0bd-4b6b-a34d-6a95d7ce00ac",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fae9f86-5468-4113-b7ea-c0b70f8552e9",
          "scriptId": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
          "execution": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 4,
          "test": "Produtos do carrinho têm propriedades corretas",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:5:16)",
          "checksum": "c890f80297a4e38706627f85798178cd",
          "id": "19f2fbee-4183-4d52-b662-89019d882589",
          "timestamp": 1756255605701,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
          "name": "Listar Carrinhos",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem estrutura correta\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('quantidade');",
                  "    pm.expect(jsonData).to.have.property('carrinhos');",
                  "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Quantidade corresponde ao array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                  "});",
                  "",
                  "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0) {",
                  "        const carrinho = jsonData.carrinhos[0];",
                  "        pm.expect(carrinho).to.have.property('produtos');",
                  "        pm.expect(carrinho).to.have.property('precoTotal');",
                  "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                  "        pm.expect(carrinho).to.have.property('idUsuario');",
                  "        pm.expect(carrinho).to.have.property('_id');",
                  "        pm.expect(carrinho.produtos).to.be.an('array');",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                  "        const produto = jsonData.carrinhos[0].produtos[0];",
                  "        pm.expect(produto).to.have.property('idProduto');",
                  "        pm.expect(produto).to.have.property('quantidade');",
                  "        pm.expect(produto).to.have.property('precoUnitario');",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f442f897-b0bd-4b6b-a34d-6a95d7ce00ac",
          "length": 28,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8fae9f86-5468-4113-b7ea-c0b70f8552e9",
          "scriptId": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
          "execution": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Token não encontrado",
          "message": "Execute o login primeiro para obter o token",
          "stack": "AssertionError: Execute o login primeiro para obter o token\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "69df70a4067b5c417e2db0a12afa9b63",
          "id": "9137c6ab-7e85-4f3a-b3aa-e6c4a21f0dfb",
          "timestamp": 1756255605712,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
          "name": "Cadastrar Carrinho - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token e produto para adicionar ao carrinho",
                  "const token = pm.environment.get(\"authToken\");",
                  "let productId = pm.environment.get(\"productId\");",
                  "",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Se não tiver productId, usa um existente",
                  "if (!productId) {",
                  "    productId = pm.environment.get(\"existingProductId\");",
                  "    pm.environment.set(\"productId\", productId);",
                  "}",
                  "",
                  "if (!productId) {",
                  "    pm.test(\"Product ID não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "077908fd-1103-4913-9c2b-233be758ac11",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"cartId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d35a04d-7593-4aee-a041-1abd958a6292",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "scriptId": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
          "execution": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Product ID não encontrado",
          "message": "Execute a listagem de produtos ou cadastre um produto primeiro",
          "stack": "AssertionError: Execute a listagem de produtos ou cadastre um produto primeiro\n   at Object.eval sandbox-script.js:2:17)",
          "checksum": "e5669b489132344404f1016794b8f81c",
          "id": "ae8167c2-7999-4648-9e63-80f860d63ef2",
          "timestamp": 1756255605712,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
          "name": "Cadastrar Carrinho - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token e produto para adicionar ao carrinho",
                  "const token = pm.environment.get(\"authToken\");",
                  "let productId = pm.environment.get(\"productId\");",
                  "",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Se não tiver productId, usa um existente",
                  "if (!productId) {",
                  "    productId = pm.environment.get(\"existingProductId\");",
                  "    pm.environment.set(\"productId\", productId);",
                  "}",
                  "",
                  "if (!productId) {",
                  "    pm.test(\"Product ID não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "077908fd-1103-4913-9c2b-233be758ac11",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"cartId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d35a04d-7593-4aee-a041-1abd958a6292",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "scriptId": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
          "execution": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "dc8e2a6d-04d9-4127-bdfa-3ba2f7021985",
          "timestamp": 1756255605718,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
          "name": "Cadastrar Carrinho - Sucesso",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "carrinhos"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "e075fedf-ff0c-42ad-bf12-82a5a3d2bdb7",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"\",\n      \"quantidade\": 2\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token e produto para adicionar ao carrinho",
                  "const token = pm.environment.get(\"authToken\");",
                  "let productId = pm.environment.get(\"productId\");",
                  "",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Se não tiver productId, usa um existente",
                  "if (!productId) {",
                  "    productId = pm.environment.get(\"existingProductId\");",
                  "    pm.environment.set(\"productId\", productId);",
                  "}",
                  "",
                  "if (!productId) {",
                  "    pm.test(\"Product ID não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                  "    });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "077908fd-1103-4913-9c2b-233be758ac11",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"cartId\", jsonData._id);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "9d35a04d-7593-4aee-a041-1abd958a6292",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "84d907b5-0f1c-4fd7-a223-46410cd1461e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "f4a1a35e02f90ac55f678812a409131f",
          "id": "4740abec-df66-4afc-9215-f1c1c01a6efc",
          "timestamp": 1756255605723,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
          "name": "Cadastrar Carrinho - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token e produto para adicionar ao carrinho",
                  "const token = pm.environment.get(\"authToken\");",
                  "let productId = pm.environment.get(\"productId\");",
                  "",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Se não tiver productId, usa um existente",
                  "if (!productId) {",
                  "    productId = pm.environment.get(\"existingProductId\");",
                  "    pm.environment.set(\"productId\", productId);",
                  "}",
                  "",
                  "if (!productId) {",
                  "    pm.test(\"Product ID não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "077908fd-1103-4913-9c2b-233be758ac11",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"cartId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d35a04d-7593-4aee-a041-1abd958a6292",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "84d907b5-0f1c-4fd7-a223-46410cd1461e",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "2c4bdae0-6697-4b8d-9527-cf2e9892655b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:17)",
          "checksum": "29d02fea81136ad144981c4cdd1553a8",
          "id": "ef738c62-f137-4856-a9a2-09a42076ef16",
          "timestamp": 1756255605723,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
          "name": "Cadastrar Carrinho - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token e produto para adicionar ao carrinho",
                  "const token = pm.environment.get(\"authToken\");",
                  "let productId = pm.environment.get(\"productId\");",
                  "",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Se não tiver productId, usa um existente",
                  "if (!productId) {",
                  "    productId = pm.environment.get(\"existingProductId\");",
                  "    pm.environment.set(\"productId\", productId);",
                  "}",
                  "",
                  "if (!productId) {",
                  "    pm.test(\"Product ID não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "077908fd-1103-4913-9c2b-233be758ac11",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"cartId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d35a04d-7593-4aee-a041-1abd958a6292",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "84d907b5-0f1c-4fd7-a223-46410cd1461e",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "2c4bdae0-6697-4b8d-9527-cf2e9892655b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:17)",
          "checksum": "4b68fb51573f576cfa90cefe804dbee1",
          "id": "f5f1468d-4e0a-4456-a1a9-d8d7ce42e495",
          "timestamp": 1756255605723,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
          "name": "Cadastrar Carrinho - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token e produto para adicionar ao carrinho",
                  "const token = pm.environment.get(\"authToken\");",
                  "let productId = pm.environment.get(\"productId\");",
                  "",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Se não tiver productId, usa um existente",
                  "if (!productId) {",
                  "    productId = pm.environment.get(\"existingProductId\");",
                  "    pm.environment.set(\"productId\", productId);",
                  "}",
                  "",
                  "if (!productId) {",
                  "    pm.test(\"Product ID não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "077908fd-1103-4913-9c2b-233be758ac11",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"cartId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d35a04d-7593-4aee-a041-1abd958a6292",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "84d907b5-0f1c-4fd7-a223-46410cd1461e",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "2c4bdae0-6697-4b8d-9527-cf2e9892655b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:17)",
          "checksum": "a0c3614db7c0a00864b393e84231f717",
          "id": "50be8630-0909-424f-aa57-64a31adb57f0",
          "timestamp": 1756255605724,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
          "name": "Cadastrar Carrinho - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token e produto para adicionar ao carrinho",
                  "const token = pm.environment.get(\"authToken\");",
                  "let productId = pm.environment.get(\"productId\");",
                  "",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Se não tiver productId, usa um existente",
                  "if (!productId) {",
                  "    productId = pm.environment.get(\"existingProductId\");",
                  "    pm.environment.set(\"productId\", productId);",
                  "}",
                  "",
                  "if (!productId) {",
                  "    pm.test(\"Product ID não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "077908fd-1103-4913-9c2b-233be758ac11",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"cartId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d35a04d-7593-4aee-a041-1abd958a6292",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "84d907b5-0f1c-4fd7-a223-46410cd1461e",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "2c4bdae0-6697-4b8d-9527-cf2e9892655b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 201",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "91569801de6d0597e9fc4bb20f0e1cdf",
          "id": "37f6d839-03a2-4253-a385-a3952f5f8aa3",
          "timestamp": 1756255605727,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
          "name": "Cadastrar Carrinho - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token e produto para adicionar ao carrinho",
                  "const token = pm.environment.get(\"authToken\");",
                  "let productId = pm.environment.get(\"productId\");",
                  "",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Se não tiver productId, usa um existente",
                  "if (!productId) {",
                  "    productId = pm.environment.get(\"existingProductId\");",
                  "    pm.environment.set(\"productId\", productId);",
                  "}",
                  "",
                  "if (!productId) {",
                  "    pm.test(\"Product ID não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "077908fd-1103-4913-9c2b-233be758ac11",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"cartId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d35a04d-7593-4aee-a041-1abd958a6292",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "84d907b5-0f1c-4fd7-a223-46410cd1461e",
          "scriptId": "077908fd-1103-4913-9c2b-233be758ac11",
          "execution": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response tem propriedades obrigatórias",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:17)",
          "checksum": "4208cdd2679f1823b8c3b58d005dd00a",
          "id": "38665b3d-1fd2-483f-9e8a-5e59a3db42d1",
          "timestamp": 1756255605727,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
          "name": "Cadastrar Carrinho - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token e produto para adicionar ao carrinho",
                  "const token = pm.environment.get(\"authToken\");",
                  "let productId = pm.environment.get(\"productId\");",
                  "",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Se não tiver productId, usa um existente",
                  "if (!productId) {",
                  "    productId = pm.environment.get(\"existingProductId\");",
                  "    pm.environment.set(\"productId\", productId);",
                  "}",
                  "",
                  "if (!productId) {",
                  "    pm.test(\"Product ID não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "077908fd-1103-4913-9c2b-233be758ac11",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"cartId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d35a04d-7593-4aee-a041-1abd958a6292",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "84d907b5-0f1c-4fd7-a223-46410cd1461e",
          "scriptId": "077908fd-1103-4913-9c2b-233be758ac11",
          "execution": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Message de sucesso",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:17)",
          "checksum": "39a31150111a6b255cdcc2b849cd3f50",
          "id": "4a9d2bd3-30ec-49c5-ba58-0d3843cc7654",
          "timestamp": 1756255605728,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
          "name": "Cadastrar Carrinho - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token e produto para adicionar ao carrinho",
                  "const token = pm.environment.get(\"authToken\");",
                  "let productId = pm.environment.get(\"productId\");",
                  "",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Se não tiver productId, usa um existente",
                  "if (!productId) {",
                  "    productId = pm.environment.get(\"existingProductId\");",
                  "    pm.environment.set(\"productId\", productId);",
                  "}",
                  "",
                  "if (!productId) {",
                  "    pm.test(\"Product ID não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "077908fd-1103-4913-9c2b-233be758ac11",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"cartId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d35a04d-7593-4aee-a041-1abd958a6292",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "84d907b5-0f1c-4fd7-a223-46410cd1461e",
          "scriptId": "077908fd-1103-4913-9c2b-233be758ac11",
          "execution": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 3,
          "test": "ID do carrinho é válido",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:4:17)",
          "checksum": "5048b00401cf1c90a6238c4b1aba649a",
          "id": "90064938-e479-42b3-a97d-0511f9a9ab10",
          "timestamp": 1756255605728,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
          "name": "Cadastrar Carrinho - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token e produto para adicionar ao carrinho",
                  "const token = pm.environment.get(\"authToken\");",
                  "let productId = pm.environment.get(\"productId\");",
                  "",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}",
                  "",
                  "// Se não tiver productId, usa um existente",
                  "if (!productId) {",
                  "    productId = pm.environment.get(\"existingProductId\");",
                  "    pm.environment.set(\"productId\", productId);",
                  "}",
                  "",
                  "if (!productId) {",
                  "    pm.test(\"Product ID não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "077908fd-1103-4913-9c2b-233be758ac11",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho é válido\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData._id).to.be.a('string');",
                  "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                  "    // Salva o ID para usar em outras requisições",
                  "    pm.environment.set(\"cartId\", jsonData._id);",
                  "});"
                ],
                "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9d35a04d-7593-4aee-a041-1abd958a6292",
          "length": 28,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "84d907b5-0f1c-4fd7-a223-46410cd1461e",
          "scriptId": "077908fd-1103-4913-9c2b-233be758ac11",
          "execution": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "0e5ab517-1829-4650-a750-3b9009fe16cc",
          "timestamp": 1756255605747,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
          "name": "Cadastrar Carrinho - Sem Token",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "carrinhos"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "020122af-db2b-4494-bdfc-803d6bd4aa55",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "ceff13d0-d9d8-4f40-afe7-7bbad5bd3067",
          "length": 28,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f6a49e9e-13b7-4758-acb2-3e623eff6472"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "c38713433dc508a91317b7aa430bd4fd",
          "id": "1c848439-cd64-4219-976e-36f75425d274",
          "timestamp": 1756255605754,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
          "name": "Cadastrar Carrinho - Sem Token",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ceff13d0-d9d8-4f40-afe7-7bbad5bd3067",
          "length": 28,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f6a49e9e-13b7-4758-acb2-3e623eff6472",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "a02a55e3-915a-429c-861a-26a1b2a597b2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:18)",
          "checksum": "f5dcfe8a35ea8e15d94ae379d7aedb10",
          "id": "153d2a66-c3be-4162-8a56-49f0332d181f",
          "timestamp": 1756255605754,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
          "name": "Cadastrar Carrinho - Sem Token",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ceff13d0-d9d8-4f40-afe7-7bbad5bd3067",
          "length": 28,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f6a49e9e-13b7-4758-acb2-3e623eff6472",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "a02a55e3-915a-429c-861a-26a1b2a597b2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:18)",
          "checksum": "ed6aadb397214f2b1b7563e128fb5aa3",
          "id": "132721c9-f87d-4efd-85e8-586a2cda220b",
          "timestamp": 1756255605755,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
          "name": "Cadastrar Carrinho - Sem Token",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ceff13d0-d9d8-4f40-afe7-7bbad5bd3067",
          "length": 28,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f6a49e9e-13b7-4758-acb2-3e623eff6472",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "a02a55e3-915a-429c-861a-26a1b2a597b2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:18)",
          "checksum": "6133646ef2b8a867bd184df877665d12",
          "id": "d424ea2c-1a5a-4808-b264-3ec419d85ab8",
          "timestamp": 1756255605756,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
          "name": "Cadastrar Carrinho - Sem Token",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ceff13d0-d9d8-4f40-afe7-7bbad5bd3067",
          "length": 28,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f6a49e9e-13b7-4758-acb2-3e623eff6472",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "a02a55e3-915a-429c-861a-26a1b2a597b2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 401",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "cd494b0344d04290d4113ae4da4a54d4",
          "id": "c27c10ef-e6ce-403f-b099-6ef8e8192a69",
          "timestamp": 1756255605760,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
          "name": "Cadastrar Carrinho - Sem Token",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ceff13d0-d9d8-4f40-afe7-7bbad5bd3067",
          "length": 28,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f6a49e9e-13b7-4758-acb2-3e623eff6472",
          "scriptId": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
          "execution": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de erro de token",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:18)",
          "checksum": "f7223270c3e54f6fc978ec68ee43c584",
          "id": "b845fd59-3c18-41e8-abdd-61e16ac4238e",
          "timestamp": 1756255605760,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
          "name": "Cadastrar Carrinho - Sem Token",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "ceff13d0-d9d8-4f40-afe7-7bbad5bd3067",
          "length": 28,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f6a49e9e-13b7-4758-acb2-3e623eff6472",
          "scriptId": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
          "execution": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "200bc4d1-70be-489f-b637-9643c3f6e068",
          "timestamp": 1756255605773,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
          "name": "Cadastrar Carrinho - Produto Inexistente",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "carrinhos"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "ee10b456-f94c-456b-9b4a-ca666e7c5265",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de produto não encontrado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "80b082a9-b500-42b1-bf53-ca6cd233a1e2",
          "length": 28,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ac135690-bae9-41a1-9576-6e83fd267d19"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "b85bcb3c9f7dcb4b4bd481ece03140cc",
          "id": "f2953ff5-9cb9-4815-90c1-7c9e574edeed",
          "timestamp": 1756255605780,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
          "name": "Cadastrar Carrinho - Produto Inexistente",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de produto não encontrado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "80b082a9-b500-42b1-bf53-ca6cd233a1e2",
          "length": 28,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ac135690-bae9-41a1-9576-6e83fd267d19",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "b773b96e-ea73-4fa6-a052-b34c2b72d062"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "b007e5bc0322347abee77224db140e4a",
          "id": "e146b6f0-5972-47bf-ab23-3fa94487f904",
          "timestamp": 1756255605781,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
          "name": "Cadastrar Carrinho - Produto Inexistente",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de produto não encontrado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "80b082a9-b500-42b1-bf53-ca6cd233a1e2",
          "length": 28,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ac135690-bae9-41a1-9576-6e83fd267d19",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "b773b96e-ea73-4fa6-a052-b34c2b72d062"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:19)",
          "checksum": "8807a2b95f29859bca8513cb29e1d8a2",
          "id": "c3bbd159-6066-4d7c-a0ef-f3e0d430cf06",
          "timestamp": 1756255605781,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
          "name": "Cadastrar Carrinho - Produto Inexistente",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de produto não encontrado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "80b082a9-b500-42b1-bf53-ca6cd233a1e2",
          "length": 28,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ac135690-bae9-41a1-9576-6e83fd267d19",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "b773b96e-ea73-4fa6-a052-b34c2b72d062"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:19)",
          "checksum": "431f647d54e09b2d9f4c9435bae4d5e9",
          "id": "852ccc0e-1789-40fb-8a95-b53b9623d719",
          "timestamp": 1756255605781,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
          "name": "Cadastrar Carrinho - Produto Inexistente",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de produto não encontrado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "80b082a9-b500-42b1-bf53-ca6cd233a1e2",
          "length": 28,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ac135690-bae9-41a1-9576-6e83fd267d19",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "b773b96e-ea73-4fa6-a052-b34c2b72d062"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "bbc78f5d6882d294ebe527373819651b",
          "id": "226fd611-afa7-4eff-b024-b403819ba924",
          "timestamp": 1756255605784,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
          "name": "Cadastrar Carrinho - Produto Inexistente",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de produto não encontrado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "80b082a9-b500-42b1-bf53-ca6cd233a1e2",
          "length": 28,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ac135690-bae9-41a1-9576-6e83fd267d19",
          "scriptId": "47dfd676-4950-42b5-ad60-347d682bd9ff",
          "execution": "a3705105-1228-422a-976f-c727674d7d25"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de erro de produto não encontrado",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "bcb5587df7701c314aab9151d4cee9d7",
          "id": "593d335d-2e2a-4665-bab4-75ffc86ed4ea",
          "timestamp": 1756255605785,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
          "name": "Cadastrar Carrinho - Produto Inexistente",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de produto não encontrado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "80b082a9-b500-42b1-bf53-ca6cd233a1e2",
          "length": 28,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ac135690-bae9-41a1-9576-6e83fd267d19",
          "scriptId": "47dfd676-4950-42b5-ad60-347d682bd9ff",
          "execution": "a3705105-1228-422a-976f-c727674d7d25"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "6d49f363-9f03-4184-b4a9-e01ac2a4f63b",
          "timestamp": 1756255605796,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
          "name": "Buscar Carrinho por ID - Sucesso",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "carrinhos",
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "9ad7733e-578c-42f9-a8b4-9c400c6dd013",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData).to.have.property('precoTotal');",
                  "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                  "    pm.expect(jsonData).to.have.property('idUsuario');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"cartId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "218fe47e-d711-425f-9c91-04b7bf918541",
          "length": 28,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8142eb95-3441-4564-82f5-25808d65e552"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "6371cc30550e78f5cb16a4fc315da158",
          "id": "dc62545c-42c3-4b95-8d56-8409283dff49",
          "timestamp": 1756255605803,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
          "name": "Buscar Carrinho por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "{{cartId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData).to.have.property('precoTotal');",
                  "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                  "    pm.expect(jsonData).to.have.property('idUsuario');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"cartId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "218fe47e-d711-425f-9c91-04b7bf918541",
          "length": 28,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8142eb95-3441-4564-82f5-25808d65e552",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "9f561e23-4a4f-4c8b-aa88-60822b0e549b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:20)",
          "checksum": "161ec827c32ecec02f23a12c8e906929",
          "id": "0957ebcd-1174-4482-9b69-b81b06221bfb",
          "timestamp": 1756255605804,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
          "name": "Buscar Carrinho por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "{{cartId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData).to.have.property('precoTotal');",
                  "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                  "    pm.expect(jsonData).to.have.property('idUsuario');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"cartId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "218fe47e-d711-425f-9c91-04b7bf918541",
          "length": 28,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8142eb95-3441-4564-82f5-25808d65e552",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "9f561e23-4a4f-4c8b-aa88-60822b0e549b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:20)",
          "checksum": "4775a0e4453d3ba16b179b01b73ccfd2",
          "id": "3c3f10ef-925f-4f69-a194-95b433498d90",
          "timestamp": 1756255605805,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
          "name": "Buscar Carrinho por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "{{cartId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData).to.have.property('precoTotal');",
                  "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                  "    pm.expect(jsonData).to.have.property('idUsuario');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"cartId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "218fe47e-d711-425f-9c91-04b7bf918541",
          "length": 28,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8142eb95-3441-4564-82f5-25808d65e552",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "9f561e23-4a4f-4c8b-aa88-60822b0e549b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:20)",
          "checksum": "e9b7f486c2d73ec3ad8e5e7b444531b3",
          "id": "3ff5a154-e382-451a-b5dd-0ebb8b58ebdd",
          "timestamp": 1756255605805,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
          "name": "Buscar Carrinho por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "{{cartId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData).to.have.property('precoTotal');",
                  "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                  "    pm.expect(jsonData).to.have.property('idUsuario');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"cartId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "218fe47e-d711-425f-9c91-04b7bf918541",
          "length": 28,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8142eb95-3441-4564-82f5-25808d65e552",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "9f561e23-4a4f-4c8b-aa88-60822b0e549b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "53e8f2826787b5d2f66e70a21363632d",
          "id": "d7bd8c77-8878-4296-9bc7-5aac1ae6b01f",
          "timestamp": 1756255605808,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
          "name": "Buscar Carrinho por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "{{cartId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData).to.have.property('precoTotal');",
                  "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                  "    pm.expect(jsonData).to.have.property('idUsuario');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"cartId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "218fe47e-d711-425f-9c91-04b7bf918541",
          "length": 28,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8142eb95-3441-4564-82f5-25808d65e552",
          "scriptId": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
          "execution": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response tem propriedades obrigatórias",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:20)",
          "checksum": "ea513ff981fa1172e02505d56e10f23a",
          "id": "bb6c251c-cc50-42d9-820b-aa899bb2fbd8",
          "timestamp": 1756255605808,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
          "name": "Buscar Carrinho por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "{{cartId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData).to.have.property('precoTotal');",
                  "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                  "    pm.expect(jsonData).to.have.property('idUsuario');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"cartId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "218fe47e-d711-425f-9c91-04b7bf918541",
          "length": 28,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8142eb95-3441-4564-82f5-25808d65e552",
          "scriptId": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
          "execution": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "ID do carrinho corresponde ao solicitado",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:3:20)",
          "checksum": "fa7aac8199aed85d98a58c1f5735fef5",
          "id": "d697aa79-b96e-4079-8466-3cd3c3438ed9",
          "timestamp": 1756255605809,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
          "name": "Buscar Carrinho por ID - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "{{cartId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('produtos');",
                  "    pm.expect(jsonData).to.have.property('precoTotal');",
                  "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                  "    pm.expect(jsonData).to.have.property('idUsuario');",
                  "    pm.expect(jsonData).to.have.property('_id');",
                  "});",
                  "",
                  "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const requestedId = pm.environment.get(\"cartId\");",
                  "    pm.expect(jsonData._id).to.eql(requestedId);",
                  "});"
                ],
                "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "218fe47e-d711-425f-9c91-04b7bf918541",
          "length": 28,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8142eb95-3441-4564-82f5-25808d65e552",
          "scriptId": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
          "execution": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "bf7a3f95-ceca-495d-a9b9-fd759701eca9",
          "timestamp": 1756255605821,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
          "name": "Buscar Carrinho por ID - Não Encontrado",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "carrinhos",
                "carrinhoInexistente123"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "9b340268-95d7-45e6-81c9-d5df5c70eff2",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "bf42148d-32d9-43d3-86b5-595f2b4d3449",
          "length": 28,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d624d6ed-d57f-4075-bcce-faccd86e3e7a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:21)",
          "checksum": "f7a15a14b265b069593e9d597ff9d4ad",
          "id": "8aad243b-1742-4901-8344-c8129dd3580b",
          "timestamp": 1756255605828,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
          "name": "Buscar Carrinho por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "carrinhoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bf42148d-32d9-43d3-86b5-595f2b4d3449",
          "length": 28,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d624d6ed-d57f-4075-bcce-faccd86e3e7a",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "f9d7d8a2-4a43-413d-ac0f-5bc91140af49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:21)",
          "checksum": "d63d5664b0ec2f6920107426903a28da",
          "id": "2359701c-1091-4d13-ae27-9fb969b21567",
          "timestamp": 1756255605829,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
          "name": "Buscar Carrinho por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "carrinhoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bf42148d-32d9-43d3-86b5-595f2b4d3449",
          "length": 28,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d624d6ed-d57f-4075-bcce-faccd86e3e7a",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "f9d7d8a2-4a43-413d-ac0f-5bc91140af49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:21)",
          "checksum": "6280d5afef00c83d5d87bb033ccaf158",
          "id": "22ed2e57-1766-4c0e-9db1-e6dd921c4560",
          "timestamp": 1756255605830,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
          "name": "Buscar Carrinho por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "carrinhoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bf42148d-32d9-43d3-86b5-595f2b4d3449",
          "length": 28,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d624d6ed-d57f-4075-bcce-faccd86e3e7a",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "f9d7d8a2-4a43-413d-ac0f-5bc91140af49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:21)",
          "checksum": "a628e2803297240d77dbfa35c5ada14b",
          "id": "2dfd17e1-8ac3-44cd-bd3e-b2f26a7e9a3a",
          "timestamp": 1756255605830,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
          "name": "Buscar Carrinho por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "carrinhoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bf42148d-32d9-43d3-86b5-595f2b4d3449",
          "length": 28,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d624d6ed-d57f-4075-bcce-faccd86e3e7a",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "f9d7d8a2-4a43-413d-ac0f-5bc91140af49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:21)",
          "checksum": "b8581625817a82be68bdc2d48d19e6cc",
          "id": "8b2de94f-c434-465c-9f08-75afa5ed254a",
          "timestamp": 1756255605833,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
          "name": "Buscar Carrinho por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "carrinhoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bf42148d-32d9-43d3-86b5-595f2b4d3449",
          "length": 28,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d624d6ed-d57f-4075-bcce-faccd86e3e7a",
          "scriptId": "537c11ab-cef3-4a92-93b1-d3701a629cff",
          "execution": "f409fbba-da46-46a8-87e7-cdc21b723337"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de erro correto",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:21)",
          "checksum": "6c774ac64e42db910c390c91cc682212",
          "id": "862c8e41-32fb-4c08-b340-410ceacab3b6",
          "timestamp": 1756255605834,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
          "name": "Buscar Carrinho por ID - Não Encontrado",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "carrinhoInexistente123"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro correto\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                  "});"
                ],
                "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "bf42148d-32d9-43d3-86b5-595f2b4d3449",
          "length": 28,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d624d6ed-d57f-4075-bcce-faccd86e3e7a",
          "scriptId": "537c11ab-cef3-4a92-93b1-d3701a629cff",
          "execution": "f409fbba-da46-46a8-87e7-cdc21b723337"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Token não encontrado",
          "message": "Execute o login primeiro para obter o token",
          "stack": "AssertionError: Execute o login primeiro para obter o token\n   at Object.eval sandbox-script.js:1:22)",
          "checksum": "e9579e0b0c248cb81130602079362de2",
          "id": "3400eab8-ca3e-4366-a08a-d5052d5a71a2",
          "timestamp": 1756255605841,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "39995f61-108c-470e-8b69-926b97624fb0",
          "name": "Concluir Compra - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "concluir-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Não foi encontrado carrinho para esse usuário\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});",
                  "",
                  "// Limpa o cartId se a compra foi concluída com sucesso",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.message === \"Registro excluído com sucesso\") {",
                  "    pm.environment.unset(\"cartId\");",
                  "}"
                ],
                "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3af485bc-e363-4c07-9058-d981ac04befa",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "scriptId": "47f92142-01ff-40e5-9d24-e5601ebc7670",
          "execution": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "8e21a74b-b046-41de-88f4-793d80f98eed",
          "timestamp": 1756255605850,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "39995f61-108c-470e-8b69-926b97624fb0",
          "name": "Concluir Compra - Sucesso",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "carrinhos",
                "concluir-compra"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "dd037d0a-b72a-42dd-8391-e9d1ba45fcf2",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Não foi encontrado carrinho para esse usuário\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});",
                  "",
                  "// Limpa o cartId se a compra foi concluída com sucesso",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.message === \"Registro excluído com sucesso\") {",
                  "    pm.environment.unset(\"cartId\");",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "3af485bc-e363-4c07-9058-d981ac04befa",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8aeaf9c0-01fe-4c1a-b1dc-823481f8dccb"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:22)",
          "checksum": "66edae9ccca1a245ed57eb743f24f3f8",
          "id": "40a7c7aa-04d0-4b34-a3c3-8f7d7f872269",
          "timestamp": 1756255605855,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "39995f61-108c-470e-8b69-926b97624fb0",
          "name": "Concluir Compra - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "concluir-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Não foi encontrado carrinho para esse usuário\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});",
                  "",
                  "// Limpa o cartId se a compra foi concluída com sucesso",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.message === \"Registro excluído com sucesso\") {",
                  "    pm.environment.unset(\"cartId\");",
                  "}"
                ],
                "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3af485bc-e363-4c07-9058-d981ac04befa",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8aeaf9c0-01fe-4c1a-b1dc-823481f8dccb",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "6664347a-89d8-4231-aeec-89ff96e19c8c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:22)",
          "checksum": "f7eb9620f3ef9215ef67f5ea6091dc0c",
          "id": "b08ee0d8-e1ae-484a-9c9a-e69c628980f4",
          "timestamp": 1756255605855,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "39995f61-108c-470e-8b69-926b97624fb0",
          "name": "Concluir Compra - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "concluir-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Não foi encontrado carrinho para esse usuário\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});",
                  "",
                  "// Limpa o cartId se a compra foi concluída com sucesso",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.message === \"Registro excluído com sucesso\") {",
                  "    pm.environment.unset(\"cartId\");",
                  "}"
                ],
                "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3af485bc-e363-4c07-9058-d981ac04befa",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8aeaf9c0-01fe-4c1a-b1dc-823481f8dccb",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "6664347a-89d8-4231-aeec-89ff96e19c8c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:22)",
          "checksum": "727feee971ce21f75c1663ac37214b63",
          "id": "aebcda58-afe6-430a-bda2-cbf36068e1e8",
          "timestamp": 1756255605855,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "39995f61-108c-470e-8b69-926b97624fb0",
          "name": "Concluir Compra - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "concluir-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Não foi encontrado carrinho para esse usuário\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});",
                  "",
                  "// Limpa o cartId se a compra foi concluída com sucesso",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.message === \"Registro excluído com sucesso\") {",
                  "    pm.environment.unset(\"cartId\");",
                  "}"
                ],
                "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3af485bc-e363-4c07-9058-d981ac04befa",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8aeaf9c0-01fe-4c1a-b1dc-823481f8dccb",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "6664347a-89d8-4231-aeec-89ff96e19c8c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:22)",
          "checksum": "819e0319161cec28dd71a1340c67ed02",
          "id": "e5df9653-920e-4995-833e-57d9878ddaf0",
          "timestamp": 1756255605856,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "39995f61-108c-470e-8b69-926b97624fb0",
          "name": "Concluir Compra - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "concluir-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Não foi encontrado carrinho para esse usuário\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});",
                  "",
                  "// Limpa o cartId se a compra foi concluída com sucesso",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.message === \"Registro excluído com sucesso\") {",
                  "    pm.environment.unset(\"cartId\");",
                  "}"
                ],
                "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3af485bc-e363-4c07-9058-d981ac04befa",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8aeaf9c0-01fe-4c1a-b1dc-823481f8dccb",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "6664347a-89d8-4231-aeec-89ff96e19c8c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:22)",
          "checksum": "c99fecb0fe96ed3675bb60817b313d7d",
          "id": "5103e5a7-1574-494b-8c8f-c2118a9fe4c8",
          "timestamp": 1756255605858,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "39995f61-108c-470e-8b69-926b97624fb0",
          "name": "Concluir Compra - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "concluir-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Não foi encontrado carrinho para esse usuário\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});",
                  "",
                  "// Limpa o cartId se a compra foi concluída com sucesso",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.message === \"Registro excluído com sucesso\") {",
                  "    pm.environment.unset(\"cartId\");",
                  "}"
                ],
                "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3af485bc-e363-4c07-9058-d981ac04befa",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8aeaf9c0-01fe-4c1a-b1dc-823481f8dccb",
          "scriptId": "dd815122-acae-4aae-bf89-37e97f26806d",
          "execution": "746dc219-e16e-4310-b8d5-9a192efb40f4"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de sucesso ou aviso",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:22)",
          "checksum": "ed9c0901092f1e1fafa45bbe51d1ccec",
          "id": "e9b84dd0-987c-44a6-a937-d556ea8f69c9",
          "timestamp": 1756255605859,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "39995f61-108c-470e-8b69-926b97624fb0",
          "name": "Concluir Compra - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "concluir-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Não foi encontrado carrinho para esse usuário\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});",
                  "",
                  "// Limpa o cartId se a compra foi concluída com sucesso",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.message === \"Registro excluído com sucesso\") {",
                  "    pm.environment.unset(\"cartId\");",
                  "}"
                ],
                "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3af485bc-e363-4c07-9058-d981ac04befa",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8aeaf9c0-01fe-4c1a-b1dc-823481f8dccb",
          "scriptId": "dd815122-acae-4aae-bf89-37e97f26806d",
          "execution": "746dc219-e16e-4310-b8d5-9a192efb40f4"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token u in JSON at position 0",
          "checksum": "674c73b0a2e196398fc4e0c640dd47ed",
          "id": "6f813bc3-91ae-428a-bf6b-39ca078028cf",
          "timestamp": 1756255605860,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "39995f61-108c-470e-8b69-926b97624fb0",
          "name": "Concluir Compra - Sucesso",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "concluir-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                "type": "text/javascript",
                "exec": [
                  "// Verifica se tem token",
                  "const token = pm.environment.get(\"authToken\");",
                  "if (!token) {",
                  "    pm.test(\"Token não encontrado\", function () {",
                  "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Não foi encontrado carrinho para esse usuário\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});",
                  "",
                  "// Limpa o cartId se a compra foi concluída com sucesso",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.message === \"Registro excluído com sucesso\") {",
                  "    pm.environment.unset(\"cartId\");",
                  "}"
                ],
                "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3af485bc-e363-4c07-9058-d981ac04befa",
          "length": 28,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "8aeaf9c0-01fe-4c1a-b1dc-823481f8dccb",
          "scriptId": "dd815122-acae-4aae-bf89-37e97f26806d"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "2e0e1cbb-d892-4858-825c-9bc2c4533573",
          "timestamp": 1756255605870,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
          "name": "Cancelar Compra - Token Inválido",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "carrinhos",
                "cancelar-compra"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "4e01034b-0d4e-4796-8d9e-03af339c7a7d",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "12df333f-d51c-4b1d-be09-2a66532f7df2",
          "length": 28,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5ee6b57f-5652-4e30-8405-aa336e6092b5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "aa299a1c30af41e3bca580dc2bea06d4",
          "id": "0d26b2ad-65de-47df-b9a1-a49ccfc003f2",
          "timestamp": 1756255605874,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
          "name": "Cancelar Compra - Token Inválido",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "cancelar-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "12df333f-d51c-4b1d-be09-2a66532f7df2",
          "length": 28,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5ee6b57f-5652-4e30-8405-aa336e6092b5",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "9d8a0ad9-9238-4353-b3af-41aafbdb1a04"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:23)",
          "checksum": "1e9400fcd95f74cc59163119ebe34c64",
          "id": "a36895b7-e1ae-452a-bc4d-98e9b35a89c7",
          "timestamp": 1756255605874,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
          "name": "Cancelar Compra - Token Inválido",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "cancelar-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "12df333f-d51c-4b1d-be09-2a66532f7df2",
          "length": 28,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5ee6b57f-5652-4e30-8405-aa336e6092b5",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "9d8a0ad9-9238-4353-b3af-41aafbdb1a04"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:23)",
          "checksum": "717446d7329df2377e6ba73e72a1c745",
          "id": "32d97a7b-20f1-4de1-9988-20ccb103e3a5",
          "timestamp": 1756255605874,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
          "name": "Cancelar Compra - Token Inválido",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "cancelar-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "12df333f-d51c-4b1d-be09-2a66532f7df2",
          "length": 28,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5ee6b57f-5652-4e30-8405-aa336e6092b5",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "9d8a0ad9-9238-4353-b3af-41aafbdb1a04"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:23)",
          "checksum": "8cf37b3d48d9d0c7b16e5ac906db277e",
          "id": "11fcd1e2-5007-4d39-b6fa-44fc8e5521e2",
          "timestamp": 1756255605875,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
          "name": "Cancelar Compra - Token Inválido",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "cancelar-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "12df333f-d51c-4b1d-be09-2a66532f7df2",
          "length": 28,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5ee6b57f-5652-4e30-8405-aa336e6092b5",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "9d8a0ad9-9238-4353-b3af-41aafbdb1a04"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 401",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "04d6288bfe3b23be26e70eba6a3682c0",
          "id": "3ad345cf-f896-483c-aa13-0713d6fdc58b",
          "timestamp": 1756255605877,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
          "name": "Cancelar Compra - Token Inválido",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "cancelar-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "12df333f-d51c-4b1d-be09-2a66532f7df2",
          "length": 28,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5ee6b57f-5652-4e30-8405-aa336e6092b5",
          "scriptId": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
          "execution": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de erro de token",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:23)",
          "checksum": "d14dab86c98f72c8ac2bf37f19596b83",
          "id": "0e8b0b47-cf28-4805-8357-101eca087d68",
          "timestamp": 1756255605878,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
          "name": "Cancelar Compra - Token Inválido",
          "request": {
            "url": {
              "path": [
                "carrinhos",
                "cancelar-compra"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de token\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                  "});"
                ],
                "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
              }
            }
          ]
        },
        "parent": {
          "id": "9522afaf-1705-4e17-a3b9-3d5641bb5848",
          "name": "4. Carrinhos",
          "item": [
            {
              "id": "de11b61c-1e01-421d-80f5-4eecfbe2d518",
              "name": "Listar Carrinhos",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d61d5e41-1b7c-43ec-8f23-44e191d204c5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem estrutura correta\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('quantidade');",
                      "    pm.expect(jsonData).to.have.property('carrinhos');",
                      "    pm.expect(jsonData.carrinhos).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Quantidade corresponde ao array\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.quantidade).to.eql(jsonData.carrinhos.length);",
                      "});",
                      "",
                      "pm.test(\"Carrinhos têm propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0) {",
                      "        const carrinho = jsonData.carrinhos[0];",
                      "        pm.expect(carrinho).to.have.property('produtos');",
                      "        pm.expect(carrinho).to.have.property('precoTotal');",
                      "        pm.expect(carrinho).to.have.property('quantidadeTotal');",
                      "        pm.expect(carrinho).to.have.property('idUsuario');",
                      "        pm.expect(carrinho).to.have.property('_id');",
                      "        pm.expect(carrinho.produtos).to.be.an('array');",
                      "    }",
                      "});",
                      "",
                      "pm.test(\"Produtos do carrinho têm propriedades corretas\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.carrinhos.length > 0 && jsonData.carrinhos[0].produtos.length > 0) {",
                      "        const produto = jsonData.carrinhos[0].produtos[0];",
                      "        pm.expect(produto).to.have.property('idProduto');",
                      "        pm.expect(produto).to.have.property('quantidade');",
                      "        pm.expect(produto).to.have.property('precoUnitario');",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "bae5dae7-9420-432b-b10c-06ffa3e6653a"
                  }
                }
              ]
            },
            {
              "id": "ee847225-8de8-4643-9e1d-952ed04fbf2a",
              "name": "Cadastrar Carrinho - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 2\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4ec46d2-524e-46ab-a1c1-1aceb1f73dfa",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token e produto para adicionar ao carrinho",
                      "const token = pm.environment.get(\"authToken\");",
                      "let productId = pm.environment.get(\"productId\");",
                      "",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}",
                      "",
                      "// Se não tiver productId, usa um existente",
                      "if (!productId) {",
                      "    productId = pm.environment.get(\"existingProductId\");",
                      "    pm.environment.set(\"productId\", productId);",
                      "}",
                      "",
                      "if (!productId) {",
                      "    pm.test(\"Product ID não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute a listagem de produtos ou cadastre um produto primeiro\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "61573aec-e4ab-421b-abc1-b7c6cd3a66d0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "077908fd-1103-4913-9c2b-233be758ac11",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('message');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Cadastro realizado com sucesso\");",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho é válido\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData._id).to.be.a('string');",
                      "    pm.expect(jsonData._id.length).to.be.greaterThan(0);",
                      "    // Salva o ID para usar em outras requisições",
                      "    pm.environment.set(\"cartId\", jsonData._id);",
                      "});"
                    ],
                    "_lastExecutionId": "164b94e8-8a21-4fa1-9fc9-a6d7e706c31b"
                  }
                }
              ]
            },
            {
              "id": "b5a00df8-3c68-43b9-a637-a7f7f5579e84",
              "name": "Cadastrar Carrinho - Sem Token",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{productId}}\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "233a7bfe-4f41-40c1-b416-8fa4100bf750",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "2804a5ee-7a3f-48aa-bfb1-41a3f908c7d0"
                  }
                }
              ]
            },
            {
              "id": "df55a999-d386-49ed-b30d-c386ab68c1f0",
              "name": "Cadastrar Carrinho - Produto Inexistente",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"produtoInexistente123\",\n      \"quantidade\": 1\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47dfd676-4950-42b5-ad60-347d682bd9ff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de produto não encontrado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "a3705105-1228-422a-976f-c727674d7d25"
                  }
                }
              ]
            },
            {
              "id": "0dce66e1-a479-45a8-b57e-d7b4a8d839fc",
              "name": "Buscar Carrinho por ID - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "{{cartId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a51566cf-9ee1-4dea-8b9a-ed96424037d8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response tem propriedades obrigatórias\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('produtos');",
                      "    pm.expect(jsonData).to.have.property('precoTotal');",
                      "    pm.expect(jsonData).to.have.property('quantidadeTotal');",
                      "    pm.expect(jsonData).to.have.property('idUsuario');",
                      "    pm.expect(jsonData).to.have.property('_id');",
                      "});",
                      "",
                      "pm.test(\"ID do carrinho corresponde ao solicitado\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const requestedId = pm.environment.get(\"cartId\");",
                      "    pm.expect(jsonData._id).to.eql(requestedId);",
                      "});"
                    ],
                    "_lastExecutionId": "ebace42d-1a01-4401-a72f-7cda9aa8a418"
                  }
                }
              ]
            },
            {
              "id": "d7321f0a-5292-4c5b-954a-c26a5282f15f",
              "name": "Buscar Carrinho por ID - Não Encontrado",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "carrinhoInexistente123"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "537c11ab-cef3-4a92-93b1-d3701a629cff",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro correto\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Carrinho não encontrado\");",
                      "});"
                    ],
                    "_lastExecutionId": "f409fbba-da46-46a8-87e7-cdc21b723337"
                  }
                }
              ]
            },
            {
              "id": "39995f61-108c-470e-8b69-926b97624fb0",
              "name": "Concluir Compra - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "concluir-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "47f92142-01ff-40e5-9d24-e5601ebc7670",
                    "type": "text/javascript",
                    "exec": [
                      "// Verifica se tem token",
                      "const token = pm.environment.get(\"authToken\");",
                      "if (!token) {",
                      "    pm.test(\"Token não encontrado\", function () {",
                      "        pm.expect.fail(\"Execute o login primeiro para obter o token\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6e502bb1-d5cb-4c01-be75-afa31912cb28"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "dd815122-acae-4aae-bf89-37e97f26806d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Não foi encontrado carrinho para esse usuário\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});",
                      "",
                      "// Limpa o cartId se a compra foi concluída com sucesso",
                      "const jsonData = pm.response.json();",
                      "if (jsonData.message === \"Registro excluído com sucesso\") {",
                      "    pm.environment.unset(\"cartId\");",
                      "}"
                    ],
                    "_lastExecutionId": "746dc219-e16e-4310-b8d5-9a192efb40f4"
                  }
                }
              ]
            },
            {
              "id": "f999b059-297e-4dfe-88c8-6f9d0dd8faff",
              "name": "Cancelar Compra - Token Inválido",
              "request": {
                "url": {
                  "path": [
                    "carrinhos",
                    "cancelar-compra"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 401\", function () {",
                      "    pm.response.to.have.status(401);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de token\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.eql(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");",
                      "});"
                    ],
                    "_lastExecutionId": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "12df333f-d51c-4b1d-be09-2a66532f7df2",
          "length": 28,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5ee6b57f-5652-4e30-8405-aa336e6092b5",
          "scriptId": "70eb957e-c66e-42ce-a478-9d4c0563b0f2",
          "execution": "c83054dd-0a5f-4bed-8b31-f69f3bd7bec6"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "6d887354-9c1d-4752-a20f-60ff3679a387",
          "timestamp": 1756255605889,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
          "name": "Excluir Produto - Sucesso",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "produtos",
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "6c7601d1-9e3e-470a-a05a-0e220cabbcc2",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "64d69bbe-dd93-4c5a-96bf-7a1d7f9dfff2",
          "length": 28,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4ae8905d-8547-4567-b37f-889a97f4ba9b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "0077143721b3101e2df19a135144fb2d",
          "id": "69343cc9-029a-44fb-b520-ba2f93d3608f",
          "timestamp": 1756255605893,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
          "name": "Excluir Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
              }
            }
          ]
        },
        "parent": {
          "id": "1998b44d-5077-455d-b700-0dd19c46d34f",
          "name": "5. Cenários de Limpeza",
          "item": [
            {
              "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
              "name": "Excluir Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
                  }
                }
              ]
            },
            {
              "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
              "name": "Excluir Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "64d69bbe-dd93-4c5a-96bf-7a1d7f9dfff2",
          "length": 28,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4ae8905d-8547-4567-b37f-889a97f4ba9b",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "71ba8d0e-92f3-4b79-be86-9c8b61c58b10"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:24)",
          "checksum": "cac3c5c990b4e4593fe826b69d1a6693",
          "id": "b33757f7-b054-4f13-a6e5-a1e0243516b4",
          "timestamp": 1756255605893,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
          "name": "Excluir Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
              }
            }
          ]
        },
        "parent": {
          "id": "1998b44d-5077-455d-b700-0dd19c46d34f",
          "name": "5. Cenários de Limpeza",
          "item": [
            {
              "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
              "name": "Excluir Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
                  }
                }
              ]
            },
            {
              "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
              "name": "Excluir Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "64d69bbe-dd93-4c5a-96bf-7a1d7f9dfff2",
          "length": 28,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4ae8905d-8547-4567-b37f-889a97f4ba9b",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "71ba8d0e-92f3-4b79-be86-9c8b61c58b10"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:24)",
          "checksum": "35abe77d0ee11963581c8e58872f5746",
          "id": "ff47d9b9-3d51-4ed4-b469-6d24a7faed25",
          "timestamp": 1756255605893,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
          "name": "Excluir Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
              }
            }
          ]
        },
        "parent": {
          "id": "1998b44d-5077-455d-b700-0dd19c46d34f",
          "name": "5. Cenários de Limpeza",
          "item": [
            {
              "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
              "name": "Excluir Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
                  }
                }
              ]
            },
            {
              "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
              "name": "Excluir Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "64d69bbe-dd93-4c5a-96bf-7a1d7f9dfff2",
          "length": 28,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4ae8905d-8547-4567-b37f-889a97f4ba9b",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "71ba8d0e-92f3-4b79-be86-9c8b61c58b10"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:24)",
          "checksum": "1f7c6e3121e1b60e2f7041111c1ec22c",
          "id": "72ef8b71-dffb-4d34-b21d-a7c7e45c6303",
          "timestamp": 1756255605893,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
          "name": "Excluir Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
              }
            }
          ]
        },
        "parent": {
          "id": "1998b44d-5077-455d-b700-0dd19c46d34f",
          "name": "5. Cenários de Limpeza",
          "item": [
            {
              "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
              "name": "Excluir Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
                  }
                }
              ]
            },
            {
              "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
              "name": "Excluir Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "64d69bbe-dd93-4c5a-96bf-7a1d7f9dfff2",
          "length": 28,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4ae8905d-8547-4567-b37f-889a97f4ba9b",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "71ba8d0e-92f3-4b79-be86-9c8b61c58b10"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "bcbd96846867883fac9af2ba28a878ed",
          "id": "a4c63b5d-b2dc-468c-bd5e-27058a063489",
          "timestamp": 1756255605897,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
          "name": "Excluir Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
              }
            }
          ]
        },
        "parent": {
          "id": "1998b44d-5077-455d-b700-0dd19c46d34f",
          "name": "5. Cenários de Limpeza",
          "item": [
            {
              "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
              "name": "Excluir Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
                  }
                }
              ]
            },
            {
              "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
              "name": "Excluir Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "64d69bbe-dd93-4c5a-96bf-7a1d7f9dfff2",
          "length": 28,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4ae8905d-8547-4567-b37f-889a97f4ba9b",
          "scriptId": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
          "execution": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de sucesso ou aviso",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:24)",
          "checksum": "f125f6d2a41093e1ec9b33a86c1cab89",
          "id": "7cb24320-97e7-4d7e-adf4-f18c0f4d90ad",
          "timestamp": 1756255605898,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
          "name": "Excluir Produto - Sucesso",
          "request": {
            "url": {
              "path": [
                "produtos",
                "{{productId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
              }
            }
          ]
        },
        "parent": {
          "id": "1998b44d-5077-455d-b700-0dd19c46d34f",
          "name": "5. Cenários de Limpeza",
          "item": [
            {
              "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
              "name": "Excluir Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
                  }
                }
              ]
            },
            {
              "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
              "name": "Excluir Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "64d69bbe-dd93-4c5a-96bf-7a1d7f9dfff2",
          "length": 28,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4ae8905d-8547-4567-b37f-889a97f4ba9b",
          "scriptId": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
          "execution": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "4d7a510c-0c5d-4fe1-8d4f-908004859c5b",
          "timestamp": 1756255605910,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
          "name": "Excluir Usuário - Sucesso",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "usuarios",
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "f9bcfc58-7b9f-4c90-9209-493b394eaea3",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "9510b2f4-2a43-4fc5-820f-d1ece1e94ccb",
          "length": 28,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1fe1596e-8c80-48ea-917c-1f2bf485679c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:25)",
          "checksum": "a787b7eec78177c2017f52ac8a6ab340",
          "id": "436c6eff-d0c5-4516-9cce-a43763a9e6c0",
          "timestamp": 1756255605915,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
          "name": "Excluir Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
              }
            }
          ]
        },
        "parent": {
          "id": "1998b44d-5077-455d-b700-0dd19c46d34f",
          "name": "5. Cenários de Limpeza",
          "item": [
            {
              "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
              "name": "Excluir Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
                  }
                }
              ]
            },
            {
              "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
              "name": "Excluir Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9510b2f4-2a43-4fc5-820f-d1ece1e94ccb",
          "length": 28,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1fe1596e-8c80-48ea-917c-1f2bf485679c",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "a7a72ca1-2c11-4a97-a94f-d7b8a8858559"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:25)",
          "checksum": "3b3b11dd465430e095dde3a8ac7b6a31",
          "id": "966b2b9d-fa35-40e2-96cb-c5445159a5a6",
          "timestamp": 1756255605915,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
          "name": "Excluir Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
              }
            }
          ]
        },
        "parent": {
          "id": "1998b44d-5077-455d-b700-0dd19c46d34f",
          "name": "5. Cenários de Limpeza",
          "item": [
            {
              "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
              "name": "Excluir Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
                  }
                }
              ]
            },
            {
              "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
              "name": "Excluir Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9510b2f4-2a43-4fc5-820f-d1ece1e94ccb",
          "length": 28,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1fe1596e-8c80-48ea-917c-1f2bf485679c",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "a7a72ca1-2c11-4a97-a94f-d7b8a8858559"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:25)",
          "checksum": "80faae1c97980a7928f6b01c23ccb609",
          "id": "7492a115-0f0a-4fbd-b74d-b30930a69664",
          "timestamp": 1756255605916,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
          "name": "Excluir Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
              }
            }
          ]
        },
        "parent": {
          "id": "1998b44d-5077-455d-b700-0dd19c46d34f",
          "name": "5. Cenários de Limpeza",
          "item": [
            {
              "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
              "name": "Excluir Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
                  }
                }
              ]
            },
            {
              "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
              "name": "Excluir Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9510b2f4-2a43-4fc5-820f-d1ece1e94ccb",
          "length": 28,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1fe1596e-8c80-48ea-917c-1f2bf485679c",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "a7a72ca1-2c11-4a97-a94f-d7b8a8858559"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:25)",
          "checksum": "800b6c2406b0d9ec6b795d804a81f1d5",
          "id": "6610fdb1-6bf6-488d-b603-0f8336c4d5c3",
          "timestamp": 1756255605916,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
          "name": "Excluir Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
              }
            }
          ]
        },
        "parent": {
          "id": "1998b44d-5077-455d-b700-0dd19c46d34f",
          "name": "5. Cenários de Limpeza",
          "item": [
            {
              "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
              "name": "Excluir Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
                  }
                }
              ]
            },
            {
              "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
              "name": "Excluir Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9510b2f4-2a43-4fc5-820f-d1ece1e94ccb",
          "length": 28,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1fe1596e-8c80-48ea-917c-1f2bf485679c",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "a7a72ca1-2c11-4a97-a94f-d7b8a8858559"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)",
          "checksum": "945c8437c40b38b9ade549946b6d4531",
          "id": "b3c0300f-10b9-4944-948c-afc80849ce78",
          "timestamp": 1756255605919,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
          "name": "Excluir Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
              }
            }
          ]
        },
        "parent": {
          "id": "1998b44d-5077-455d-b700-0dd19c46d34f",
          "name": "5. Cenários de Limpeza",
          "item": [
            {
              "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
              "name": "Excluir Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
                  }
                }
              ]
            },
            {
              "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
              "name": "Excluir Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9510b2f4-2a43-4fc5-820f-d1ece1e94ccb",
          "length": 28,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1fe1596e-8c80-48ea-917c-1f2bf485679c",
          "scriptId": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
          "execution": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de sucesso ou aviso",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:25)",
          "checksum": "13285bd2711f1931d63d5044dfc4f3d4",
          "id": "4c4538a3-042c-48ae-96ef-a5588d271e70",
          "timestamp": 1756255605919,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
          "name": "Excluir Usuário - Sucesso",
          "request": {
            "url": {
              "path": [
                "usuarios",
                "{{userId}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Message de sucesso ou aviso\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    const validMessages = [",
                  "        \"Registro excluído com sucesso\",",
                  "        \"Nenhum registro excluído\"",
                  "    ];",
                  "    pm.expect(validMessages).to.include(jsonData.message);",
                  "});"
                ],
                "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
              }
            }
          ]
        },
        "parent": {
          "id": "1998b44d-5077-455d-b700-0dd19c46d34f",
          "name": "5. Cenários de Limpeza",
          "item": [
            {
              "id": "2d4f9449-448c-4e92-aec1-0edbb84df815",
              "name": "Excluir Produto - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "produtos",
                    "{{productId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72ebd9df-539d-45cc-930e-c7c1f5566f75",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7c4cfdb9-2ebe-4bf5-a595-d5e20efb1317"
                  }
                }
              ]
            },
            {
              "id": "34e8d2c5-a994-4671-b10c-326e72821d4e",
              "name": "Excluir Usuário - Sucesso",
              "request": {
                "url": {
                  "path": [
                    "usuarios",
                    "{{userId}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Message de sucesso ou aviso\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    const validMessages = [",
                      "        \"Registro excluído com sucesso\",",
                      "        \"Nenhum registro excluído\"",
                      "    ];",
                      "    pm.expect(validMessages).to.include(jsonData.message);",
                      "});"
                    ],
                    "_lastExecutionId": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9510b2f4-2a43-4fc5-820f-d1ece1e94ccb",
          "length": 28,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "1fe1596e-8c80-48ea-917c-1f2bf485679c",
          "scriptId": "7e4a8cba-61d5-4a1e-bbd1-6968ae80cd27",
          "execution": "7f7a140b-1967-4a22-9dd4-343fb1cb7bc4"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "269508ea-d043-407f-940e-446cc2e1572b",
          "timestamp": 1756255605930,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
          "name": "Cadastrar Usuário - Campos Vazios",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "usuarios"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "44036fe9-352e-4960-b57e-430d6b77f73a",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erros de validação\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "19590b1f-1d67-47cd-abb1-95b86a0ef915",
          "length": 28,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0f4b132c-81cd-4786-8e84-c618fe439001"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "15989bfe9871d1918396950e25212d47",
          "id": "cf6a718b-e357-4902-9d22-93823d633c71",
          "timestamp": 1756255605932,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
          "name": "Cadastrar Usuário - Campos Vazios",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erros de validação\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "});"
                ],
                "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "19590b1f-1d67-47cd-abb1-95b86a0ef915",
          "length": 28,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0f4b132c-81cd-4786-8e84-c618fe439001",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "9654b1c8-9b83-47ac-bdf0-7a10f3436e45"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:26)",
          "checksum": "f6ed7b78e38eecdb63a63c823531ddf6",
          "id": "0509f554-aeef-4310-b8e1-f05cc98f5d16",
          "timestamp": 1756255605933,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
          "name": "Cadastrar Usuário - Campos Vazios",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erros de validação\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "});"
                ],
                "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "19590b1f-1d67-47cd-abb1-95b86a0ef915",
          "length": 28,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0f4b132c-81cd-4786-8e84-c618fe439001",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "9654b1c8-9b83-47ac-bdf0-7a10f3436e45"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:26)",
          "checksum": "0a257f2f2efe4faa0a007dd3d9363804",
          "id": "ed1ec3ad-d86a-4a43-9321-c072cf1fd119",
          "timestamp": 1756255605933,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
          "name": "Cadastrar Usuário - Campos Vazios",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erros de validação\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "});"
                ],
                "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "19590b1f-1d67-47cd-abb1-95b86a0ef915",
          "length": 28,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0f4b132c-81cd-4786-8e84-c618fe439001",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "9654b1c8-9b83-47ac-bdf0-7a10f3436e45"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:26)",
          "checksum": "00f02daf021a80999396d322b3c77962",
          "id": "055f5a61-e80e-4b85-ade7-2320f821db09",
          "timestamp": 1756255605933,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
          "name": "Cadastrar Usuário - Campos Vazios",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erros de validação\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "});"
                ],
                "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "19590b1f-1d67-47cd-abb1-95b86a0ef915",
          "length": 28,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0f4b132c-81cd-4786-8e84-c618fe439001",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "9654b1c8-9b83-47ac-bdf0-7a10f3436e45"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "769f918a4fce20bbc084c7e263e50995",
          "id": "13bcf628-64a6-4408-8be9-f8ed7ae51c28",
          "timestamp": 1756255605937,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
          "name": "Cadastrar Usuário - Campos Vazios",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erros de validação\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "});"
                ],
                "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "19590b1f-1d67-47cd-abb1-95b86a0ef915",
          "length": 28,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0f4b132c-81cd-4786-8e84-c618fe439001",
          "scriptId": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
          "execution": "d7100293-564e-45ea-8941-654982289659"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contém erros de validação",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:26)",
          "checksum": "940618c2dde1f71fe013368942fbc61a",
          "id": "4ed602e0-e69b-4250-a764-756a5dd24530",
          "timestamp": 1756255605938,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
          "name": "Cadastrar Usuário - Campos Vazios",
          "request": {
            "url": {
              "path": [
                "usuarios"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erros de validação\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('nome');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('password');",
                  "    pm.expect(jsonData).to.have.property('administrador');",
                  "});"
                ],
                "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "19590b1f-1d67-47cd-abb1-95b86a0ef915",
          "length": 28,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0f4b132c-81cd-4786-8e84-c618fe439001",
          "scriptId": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
          "execution": "d7100293-564e-45ea-8941-654982289659"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "d862a98a-a96b-4dd4-a4ea-1225a4669dc7",
          "timestamp": 1756255605951,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
          "name": "Cadastrar Produto - Preço Negativo",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "produtos"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "ec3434ff-a9ab-460a-a033-95b2c8db4037",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erro de validação de preço\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "c68971b0-9b6d-4772-81c1-872c4f6e0e3b",
          "length": 28,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4a08b1ef-143e-4792-9e06-4944c34e6e64"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:27)",
          "checksum": "2b9d9ddffe113b783b17ebd7e60e5def",
          "id": "bb84063c-3b1f-4618-bbae-97505dbb5cfd",
          "timestamp": 1756255605954,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
          "name": "Cadastrar Produto - Preço Negativo",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erro de validação de preço\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "});"
                ],
                "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c68971b0-9b6d-4772-81c1-872c4f6e0e3b",
          "length": 28,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4a08b1ef-143e-4792-9e06-4944c34e6e64",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "f7a1a9fd-5e1b-44f2-b4f3-0ad4e07ac894"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:27)",
          "checksum": "8909546ca9976aeb9b1d1681cb396992",
          "id": "877cd473-2544-450d-9643-aba27832c7b7",
          "timestamp": 1756255605955,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
          "name": "Cadastrar Produto - Preço Negativo",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erro de validação de preço\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "});"
                ],
                "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c68971b0-9b6d-4772-81c1-872c4f6e0e3b",
          "length": 28,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4a08b1ef-143e-4792-9e06-4944c34e6e64",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "f7a1a9fd-5e1b-44f2-b4f3-0ad4e07ac894"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:27)",
          "checksum": "4bda784f47852344d17f5c3ee1b2b0bc",
          "id": "477d1623-254c-415f-b721-499830be7f98",
          "timestamp": 1756255605955,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
          "name": "Cadastrar Produto - Preço Negativo",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erro de validação de preço\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "});"
                ],
                "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c68971b0-9b6d-4772-81c1-872c4f6e0e3b",
          "length": 28,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4a08b1ef-143e-4792-9e06-4944c34e6e64",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "f7a1a9fd-5e1b-44f2-b4f3-0ad4e07ac894"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:27)",
          "checksum": "4796bb6e10fa00c50b6d997aceb7c297",
          "id": "dc97613f-d4b9-425f-8444-1c4169f61ba2",
          "timestamp": 1756255605955,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
          "name": "Cadastrar Produto - Preço Negativo",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erro de validação de preço\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "});"
                ],
                "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c68971b0-9b6d-4772-81c1-872c4f6e0e3b",
          "length": 28,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4a08b1ef-143e-4792-9e06-4944c34e6e64",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "f7a1a9fd-5e1b-44f2-b4f3-0ad4e07ac894"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)",
          "checksum": "6010cf0e0851b6d229e65c2adac37e10",
          "id": "9ec161bf-9d7b-4cec-bf2d-1e7b6f3b459c",
          "timestamp": 1756255605958,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
          "name": "Cadastrar Produto - Preço Negativo",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erro de validação de preço\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "});"
                ],
                "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c68971b0-9b6d-4772-81c1-872c4f6e0e3b",
          "length": 28,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4a08b1ef-143e-4792-9e06-4944c34e6e64",
          "scriptId": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
          "execution": "62a08453-eab9-4aff-9be1-0f757b3221b6"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contém erro de validação de preço",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:27)",
          "checksum": "a972223a02cb1d5159d77f4efe98cc69",
          "id": "ef4d07d7-17ea-4926-8a6d-1db7c4b726df",
          "timestamp": 1756255605959,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
          "name": "Cadastrar Produto - Preço Negativo",
          "request": {
            "url": {
              "path": [
                "produtos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response contém erro de validação de preço\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('preco');",
                  "});"
                ],
                "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c68971b0-9b6d-4772-81c1-872c4f6e0e3b",
          "length": 28,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4a08b1ef-143e-4792-9e06-4944c34e6e64",
          "scriptId": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
          "execution": "62a08453-eab9-4aff-9be1-0f757b3221b6"
        }
      },
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3000,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3000",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3000\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "cdd6435f8d2b1f4d44ad410560c369ac",
          "id": "caa73ea4-0f5a-478e-8925-0bd6d68c3aff",
          "timestamp": 1756255605970,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
          "name": "Cadastrar Carrinho - Quantidade Excessiva",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "carrinhos"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "4f34b2a7-0858-42de-a763-373ec5d05be6",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3000",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74f41699-8194-4067-b4cf-21b282160563",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "67dac1f2-c38c-4e60-b4fe-59b4f0c4499b",
          "length": 28,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f1e7f78c-09f8-4c91-b5ee-dbe647ab7761"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response é JSON válido",
          "message": "expected response body to be a valid json but got error Unexpected token u in JSON at position 0",
          "stack": "AssertionError: expected response body to be a valid json but got error Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:1:28)",
          "checksum": "115e8b784731d4325434c0349b5dd5ab",
          "id": "fc589937-6f3d-4c98-9cbf-c2c6eba70e0e",
          "timestamp": 1756255605972,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
          "name": "Cadastrar Carrinho - Quantidade Excessiva",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74f41699-8194-4067-b4cf-21b282160563",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                  "});"
                ],
                "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "67dac1f2-c38c-4e60-b4fe-59b4f0c4499b",
          "length": 28,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f1e7f78c-09f8-4c91-b5ee-dbe647ab7761",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "6c611e55-f031-4f63-a83b-4b8e956d951a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time é aceitável",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:28)",
          "checksum": "bee617be0387c1b4802a4c28ed933f73",
          "id": "267ce1e9-bb90-4d73-b11e-a26a32b5b465",
          "timestamp": 1756255605972,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
          "name": "Cadastrar Carrinho - Quantidade Excessiva",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74f41699-8194-4067-b4cf-21b282160563",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                  "});"
                ],
                "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "67dac1f2-c38c-4e60-b4fe-59b4f0c4499b",
          "length": 28,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f1e7f78c-09f8-4c91-b5ee-dbe647ab7761",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "6c611e55-f031-4f63-a83b-4b8e956d951a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Content-Type correto",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:3:28)",
          "checksum": "77f0416c6e6ce83c68b6c09c1e3a87a2",
          "id": "87160a99-94ea-43db-88a6-50a35fec4e90",
          "timestamp": 1756255605973,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
          "name": "Cadastrar Carrinho - Quantidade Excessiva",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74f41699-8194-4067-b4cf-21b282160563",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                  "});"
                ],
                "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "67dac1f2-c38c-4e60-b4fe-59b4f0c4499b",
          "length": 28,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f1e7f78c-09f8-4c91-b5ee-dbe647ab7761",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "6c611e55-f031-4f63-a83b-4b8e956d951a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Não há vazamento de dados sensíveis",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:4:28)",
          "checksum": "dc195e08206626d68d9fde1174c17ba0",
          "id": "ac1ebb16-b435-46c4-99cc-f417bf0e1c18",
          "timestamp": 1756255605973,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
          "name": "Cadastrar Carrinho - Quantidade Excessiva",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74f41699-8194-4067-b4cf-21b282160563",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                  "});"
                ],
                "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "67dac1f2-c38c-4e60-b4fe-59b4f0c4499b",
          "length": 28,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f1e7f78c-09f8-4c91-b5ee-dbe647ab7761",
          "scriptId": "71a067b6-0888-42d1-8ef2-3f9ff22d41ab",
          "execution": "6c611e55-f031-4f63-a83b-4b8e956d951a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code é 400",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)",
          "checksum": "5269acf4704f519b218e79f8275394ff",
          "id": "c201724e-501e-4beb-a401-fa22103f5771",
          "timestamp": 1756255605976,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
          "name": "Cadastrar Carrinho - Quantidade Excessiva",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74f41699-8194-4067-b4cf-21b282160563",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                  "});"
                ],
                "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "67dac1f2-c38c-4e60-b4fe-59b4f0c4499b",
          "length": 28,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f1e7f78c-09f8-4c91-b5ee-dbe647ab7761",
          "scriptId": "74f41699-8194-4067-b4cf-21b282160563",
          "execution": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Message de erro de quantidade insuficiente",
          "message": "Unexpected token u in JSON at position 0",
          "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:28)",
          "checksum": "9e2b3a09b9f3befe651d0ca6b03aeee9",
          "id": "9d9a7f87-c3c3-44e5-8304-f46390e3092e",
          "timestamp": 1756255605976,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
          "name": "Cadastrar Carrinho - Quantidade Excessiva",
          "request": {
            "url": {
              "path": [
                "carrinhos"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "74f41699-8194-4067-b4cf-21b282160563",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code é 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                  "});"
                ],
                "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
              }
            }
          ]
        },
        "parent": {
          "id": "dbbd5072-8a3e-4ca0-b589-a01f36a876c0",
          "name": "6. Testes de Limite e Edge Cases",
          "item": [
            {
              "id": "2fc597ac-bd5e-465b-b8fb-8e33ddf9a48b",
              "name": "Cadastrar Usuário - Campos Vazios",
              "request": {
                "url": {
                  "path": [
                    "usuarios"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"\",\n  \"email\": \"\",\n  \"password\": \"\",\n  \"administrador\": \"\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7b13d16a-8009-47e7-b42d-8ea1ddcc7e91",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erros de validação\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('nome');",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "    pm.expect(jsonData).to.have.property('password');",
                      "    pm.expect(jsonData).to.have.property('administrador');",
                      "});"
                    ],
                    "_lastExecutionId": "d7100293-564e-45ea-8941-654982289659"
                  }
                }
              ]
            },
            {
              "id": "4bff6c60-c608-4574-8c02-7dd972c0d24e",
              "name": "Cadastrar Produto - Preço Negativo",
              "request": {
                "url": {
                  "path": [
                    "produtos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"nome\": \"Produto Preço Inválido\",\n  \"preco\": -100,\n  \"descricao\": \"Teste preço negativo\",\n  \"quantidade\": 50\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b799ac72-ec96-497d-a4ea-6db9fcc1e838",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Response contém erro de validação de preço\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('preco');",
                      "});"
                    ],
                    "_lastExecutionId": "62a08453-eab9-4aff-9be1-0f757b3221b6"
                  }
                }
              ]
            },
            {
              "id": "dbce954b-d91e-4c24-9604-63c5bb23ee5c",
              "name": "Cadastrar Carrinho - Quantidade Excessiva",
              "request": {
                "url": {
                  "path": [
                    "carrinhos"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{authToken}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"produtos\": [\n    {\n      \"idProduto\": \"{{existingProductId}}\",\n      \"quantidade\": 99999\n    }\n  ]\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "74f41699-8194-4067-b4cf-21b282160563",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code é 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "pm.test(\"Message de erro de quantidade insuficiente\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.message).to.contain(\"Produto não possui quantidade suficiente\");",
                      "});"
                    ],
                    "_lastExecutionId": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "67dac1f2-c38c-4e60-b4fe-59b4f0c4499b",
          "length": 28,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f1e7f78c-09f8-4c91-b5ee-dbe647ab7761",
          "scriptId": "74f41699-8194-4067-b4cf-21b282160563",
          "execution": "13aedaa9-91a6-46b6-87c6-e040d795cdeb"
        }
      }
    ],
    "error": null
  }
}